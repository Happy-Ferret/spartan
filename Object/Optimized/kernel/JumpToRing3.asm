; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\cex123\Desktop\FYP\develop\spartan\Source\Kernel\Thread\Scheduler\JumpToRing3.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	_ring3:PROC
PUBLIC	_JumpToRing3
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\scheduler\jumptoring3.c
_TEXT	SEGMENT
_JumpToRing3 PROC
; _path$dead$ = ecx

; 12   :   //if (!TestRunner(3)) for (;;);
; 13   :     FromRing0 = true;
; 14   : 
; 15   :     CPcb *pcb = IProcess_Load(path);

	mov	ecx, OFFSET ??_C@_0BD@MGDBMFGD@System?1Desktop?4dll?$AA@
	mov	DWORD PTR _FromRing0, 1
	call	_IProcess_Load

; 16   :     if (!pcb) return false;

	test	eax, eax
	jne	SHORT $LN3@JumpToRing

; 31   : }

	ret	0
$LN3@JumpToRing:
	push	esi

; 17   :     CPeb *peb = pcb->Peb;

	mov	esi, DWORD PTR [eax+20]

; 18   :     if (!peb) return false;

	test	esi, esi
	jne	SHORT $LN2@JumpToRing
	xor	eax, eax
	pop	esi

; 31   : }

	ret	0
$LN2@JumpToRing:
	push	edi

; 19   : 
; 20   :     CContext *ctx = IProcess_Enqueue(pcb);

	mov	ecx, eax
	call	_IProcess_Enqueue
	mov	edi, eax

; 21   :     if (!ctx) return false;

	test	edi, edi
	je	SHORT $LN7@JumpToRing
$LN1@JumpToRing:

; 22   :     movsd(peb->Pages, Monitor->GetBase('PAGE'), 4*KB/4);

	mov	eax, DWORD PTR _Monitor
	push	1024					; 00000400H
	push	1346455365				; 50414745H
	call	DWORD PTR [eax+24]
	pop	ecx
	push	eax
	push	DWORD PTR [esi+24]
	call	_movsd

; 23   : 
; 24   :     CTask *TaskPool = (CTask*)MMAP_TASKPOOL;
; 25   :     TaskPool->Tss->esp0 = (int)&ctx->pid;

	mov	ecx, DWORD PTR ds:1668
	lea	edx, DWORD PTR [edi+60]

; 26   : 
; 27   :     FromRing0 = false;

	and	DWORD PTR _FromRing0, 0
	mov	DWORD PTR [ecx+4], edx

; 28   :     Thread->Run(ctx->pid);

	mov	ecx, DWORD PTR _Thread
	push	DWORD PTR [edx]
	call	DWORD PTR [ecx+20]

; 29   :     ring3(ctx);

	push	edi
	call	_ring3

; 30   :     return true;

	xor	eax, eax
	add	esp, 20					; 00000014H
	inc	eax
$LN7@JumpToRing:

; 31   : }

	pop	edi
	pop	esi
	ret	0
_JumpToRing3 ENDP
_TEXT	ENDS
END
