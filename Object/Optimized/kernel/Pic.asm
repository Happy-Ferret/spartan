; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\cex123\Desktop\XXXXX\osdev\osdev-216\Source\Kernel\BootLoad\Intel\Pic.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	_inb:PROC
EXTRN	_outb:PROC
PUBLIC	_RemapPic
_pic1	DB	01H DUP (?)
	ALIGN	4

_pic2	DB	01H DUP (?)
_BSS	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-216\source\kernel\bootload\intel\pic.c
_TEXT	SEGMENT
_RemapPic PROC

; 17   : bool RemapPic(void) {

	push	esi
	push	edi

; 18   :     Logger(" Remapping  PIC  ... OK\n");
; 19   : 	pic1 = inb(PIC1_DATA);                     // save masks

	push	33					; 00000021H
	pop	esi
	push	esi
	call	_inb

; 20   : 	pic2 = inb(PIC2_DATA);                     // save masks

	mov	edi, 161				; 000000a1H
	mov	BYTE PTR _pic1, al
	push	edi
	call	_inb

; 21   :     outb(PIC1_CMD,  ICW1|ICW1_INIT|ICW1_ICW4); // ICW1_INIT+ICW1_ICW4

	push	17					; 00000011H
	push	32					; 00000020H
	mov	BYTE PTR _pic2, al
	call	_outb

; 22   :     outb(PIC2_CMD,  ICW1|ICW1_INIT|ICW1_ICW4); // ICW1_INIT+ICW1_ICW4

	push	17					; 00000011H
	push	160					; 000000a0H
	call	_outb

; 23   :     outb(PIC1_DATA, ICW2|0x20);                // PIC1 vector

	push	32					; 00000020H
	push	esi
	call	_outb

; 24   :     outb(PIC2_DATA, ICW2|0x28);                // PIC2 vector

	push	40					; 00000028H
	push	edi
	call	_outb

; 25   :     outb(PIC1_DATA, ICW3|ICW3_IRQ);            // tell PIC1 its master chained to PIC2

	push	4
	push	esi
	call	_outb

; 26   :     outb(PIC2_DATA, ICW3|ICW3_ID);             // tell PIC2 its identity is slave

	push	2
	push	edi
	call	_outb

; 27   :     outb(PIC1_DATA, ICW4|ICW4_8086);           // generate 8086 interrupts

	push	1
	push	esi
	call	_outb
	add	esp, 64					; 00000040H

; 28   :     outb(PIC2_DATA, ICW4|ICW4_8086);           // generate 8086 interrupts

	push	1
	push	edi
	call	_outb

; 29   : 
; 30   :     pic1 = 0;//~(PIC1_SPK|PIC1_KBD|PIC1_PIC2|PIC1_COM1|PIC1_COM2);

	xor	ecx, ecx

; 31   :     pic2 = 0;//~(PIC2_RTC|PIC2_CGA|PIC2_AUX |PIC2_FPU |PIC2_HDD );
; 32   :     outb(PIC1_DATA, pic1);                     // unmask all interrupts

	push	ecx
	push	esi
	mov	BYTE PTR _pic1, cl
	mov	BYTE PTR _pic2, cl
	call	_outb

; 33   :     outb(PIC2_DATA, pic2);                     // unmask all interrupts

	movzx	ecx, BYTE PTR _pic2
	push	ecx
	push	edi
	call	_outb
	add	esp, 24					; 00000018H

; 34   :     return true;

	xor	eax, eax
	inc	eax
	pop	edi
	pop	esi

; 35   : }

	ret	0
_RemapPic ENDP
_TEXT	ENDS
END
