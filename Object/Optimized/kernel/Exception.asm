; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\cex123\Desktop\FYP\develop\spartan\Source\Kernel\Thread\Exception\Exception.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_Exception
PUBLIC	??_C@_0BG@GDLBNFAF@?5?$FLFAIL?$FN?5Divide?5?$CFX?5?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@OGHHPALA@?5?$FLFAIL?$FN?5Debug?5?$CFX?5?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0BN@KFJKEHOG@?5?$FLFAIL?$FN?5Nmi?5Interrupt?5?$CFX?5?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0BK@FIAGMOJB@?5?$FLFAIL?$FN?5Breakpoint?5?$CFX?5?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0BI@BPADGLLA@?5?$FLFAIL?$FN?5Overflow?5?$CFX?5?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0CE@MJKBANIJ@?5?$FLFAIL?$FN?5Bound?5Range?5Exceeded?5?$CFX?5@ ; `string'
PUBLIC	??_C@_0BO@CAHBGDHK@?5?$FLFAIL?$FN?5Invalid?5Opcode?5?$CFX?5?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@CMIGMBEJ@?5?$FLFAIL?$FN?5Fpu?5Not?5Available?5?$CFX?5?$CFX?6@ ; `string'
PUBLIC	??_C@_0BM@KBPNPDDD@?5?$FLFAIL?$FN?5Double?5Fault?5?$CFX?5?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0CD@CALALKNE@?5?$FLFAIL?$FN?5Fpu?5Segment?5Overrun?5?$CFX?5?$CF@ ; `string'
PUBLIC	??_C@_0BL@MHFKIHDL@?5?$FLFAIL?$FN?5Invalid?5Tss?5?$CFX?5?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0CD@IPMLNEGJ@?5?$FLFAIL?$FN?5Segment?5Not?5Present?5?$CFX?5?$CF@ ; `string'
PUBLIC	??_C@_0BN@PJFKLOBC@?5?$FLFAIL?$FN?5Segment?5Fault?5?$CFX?5?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0CC@HOIEGFBB@?5?$FLFAIL?$FN?5General?5Protection?5?$CFX?5?$CFX@ ; `string'
PUBLIC	??_C@_0BK@NKFDNADC@?5?$FLFAIL?$FN?5Page?5Fault?5?$CFX?5?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0BI@OBOGMKIE@?5?$FLFAIL?$FN?5Fpu?5Math?5?$CFX?5?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OGKJPLO@?5?$FLFAIL?$FN?5Alignment?5?$CFX?5?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0BH@EGJCDAFL@?5?$FLFAIL?$FN?5Machine?5?$CFX?5?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0BI@CKGJIKKF@?5?$FLFAIL?$FN?5Simd?5Fpu?5?$CFX?5?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0BP@KLPCCEPC@?5?$FLFAIL?$FN?5Virtualization?5?5?$CFX?5?$CFX?6?$AA@ ; `string'
EXTRN	_stmxcsr:PROC
COMM	_DeathLoop:DWORD
_DATA	ENDS
;	COMDAT ??_C@_0BP@KLPCCEPC@?5?$FLFAIL?$FN?5Virtualization?5?5?$CFX?5?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BP@KLPCCEPC@?5?$FLFAIL?$FN?5Virtualization?5?5?$CFX?5?$CFX?6?$AA@ DB ' '
	DB	'[FAIL] Virtualization  %X %X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CKGJIKKF@?5?$FLFAIL?$FN?5Simd?5Fpu?5?$CFX?5?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BI@CKGJIKKF@?5?$FLFAIL?$FN?5Simd?5Fpu?5?$CFX?5?$CFX?6?$AA@ DB ' [F'
	DB	'AIL] Simd Fpu %X %X', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EGJCDAFL@?5?$FLFAIL?$FN?5Machine?5?$CFX?5?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BH@EGJCDAFL@?5?$FLFAIL?$FN?5Machine?5?$CFX?5?$CFX?6?$AA@ DB ' [FAI'
	DB	'L] Machine %X %X', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OGKJPLO@?5?$FLFAIL?$FN?5Alignment?5?$CFX?5?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BJ@OGKJPLO@?5?$FLFAIL?$FN?5Alignment?5?$CFX?5?$CFX?6?$AA@ DB ' [FA'
	DB	'IL] Alignment %X %X', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OBOGMKIE@?5?$FLFAIL?$FN?5Fpu?5Math?5?$CFX?5?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BI@OBOGMKIE@?5?$FLFAIL?$FN?5Fpu?5Math?5?$CFX?5?$CFX?6?$AA@ DB ' [F'
	DB	'AIL] Fpu Math %X %X', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NKFDNADC@?5?$FLFAIL?$FN?5Page?5Fault?5?$CFX?5?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BK@NKFDNADC@?5?$FLFAIL?$FN?5Page?5Fault?5?$CFX?5?$CFX?6?$AA@ DB ' '
	DB	'[FAIL] Page Fault %X %X', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HOIEGFBB@?5?$FLFAIL?$FN?5General?5Protection?5?$CFX?5?$CFX@
CONST	SEGMENT
??_C@_0CC@HOIEGFBB@?5?$FLFAIL?$FN?5General?5Protection?5?$CFX?5?$CFX@ DB ' '
	DB	'[FAIL] General Protection %X %X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PJFKLOBC@?5?$FLFAIL?$FN?5Segment?5Fault?5?$CFX?5?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BN@PJFKLOBC@?5?$FLFAIL?$FN?5Segment?5Fault?5?$CFX?5?$CFX?6?$AA@ DB ' '
	DB	'[FAIL] Segment Fault %X %X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IPMLNEGJ@?5?$FLFAIL?$FN?5Segment?5Not?5Present?5?$CFX?5?$CF@
CONST	SEGMENT
??_C@_0CD@IPMLNEGJ@?5?$FLFAIL?$FN?5Segment?5Not?5Present?5?$CFX?5?$CF@ DB ' '
	DB	'[FAIL] Segment Not Present %X %X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MHFKIHDL@?5?$FLFAIL?$FN?5Invalid?5Tss?5?$CFX?5?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BL@MHFKIHDL@?5?$FLFAIL?$FN?5Invalid?5Tss?5?$CFX?5?$CFX?6?$AA@ DB ' '
	DB	'[FAIL] Invalid Tss %X %X', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CALALKNE@?5?$FLFAIL?$FN?5Fpu?5Segment?5Overrun?5?$CFX?5?$CF@
CONST	SEGMENT
??_C@_0CD@CALALKNE@?5?$FLFAIL?$FN?5Fpu?5Segment?5Overrun?5?$CFX?5?$CF@ DB ' '
	DB	'[FAIL] Fpu Segment Overrun %X %X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KBPNPDDD@?5?$FLFAIL?$FN?5Double?5Fault?5?$CFX?5?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BM@KBPNPDDD@?5?$FLFAIL?$FN?5Double?5Fault?5?$CFX?5?$CFX?6?$AA@ DB ' '
	DB	'[FAIL] Double Fault %X %X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CMIGMBEJ@?5?$FLFAIL?$FN?5Fpu?5Not?5Available?5?$CFX?5?$CFX?6@
CONST	SEGMENT
??_C@_0CB@CMIGMBEJ@?5?$FLFAIL?$FN?5Fpu?5Not?5Available?5?$CFX?5?$CFX?6@ DB ' '
	DB	'[FAIL] Fpu Not Available %X %X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CAHBGDHK@?5?$FLFAIL?$FN?5Invalid?5Opcode?5?$CFX?5?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BO@CAHBGDHK@?5?$FLFAIL?$FN?5Invalid?5Opcode?5?$CFX?5?$CFX?6?$AA@ DB ' '
	DB	'[FAIL] Invalid Opcode %X %X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MJKBANIJ@?5?$FLFAIL?$FN?5Bound?5Range?5Exceeded?5?$CFX?5@
CONST	SEGMENT
??_C@_0CE@MJKBANIJ@?5?$FLFAIL?$FN?5Bound?5Range?5Exceeded?5?$CFX?5@ DB ' '
	DB	'[FAIL] Bound Range Exceeded %X %X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BPADGLLA@?5?$FLFAIL?$FN?5Overflow?5?$CFX?5?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BI@BPADGLLA@?5?$FLFAIL?$FN?5Overflow?5?$CFX?5?$CFX?6?$AA@ DB ' [FA'
	DB	'IL] Overflow %X %X', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FIAGMOJB@?5?$FLFAIL?$FN?5Breakpoint?5?$CFX?5?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BK@FIAGMOJB@?5?$FLFAIL?$FN?5Breakpoint?5?$CFX?5?$CFX?6?$AA@ DB ' ['
	DB	'FAIL] Breakpoint %X %X', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KFJKEHOG@?5?$FLFAIL?$FN?5Nmi?5Interrupt?5?$CFX?5?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BN@KFJKEHOG@?5?$FLFAIL?$FN?5Nmi?5Interrupt?5?$CFX?5?$CFX?6?$AA@ DB ' '
	DB	'[FAIL] Nmi Interrupt %X %X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OGHHPALA@?5?$FLFAIL?$FN?5Debug?5?$CFX?5?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BF@OGHHPALA@?5?$FLFAIL?$FN?5Debug?5?$CFX?5?$CFX?6?$AA@ DB ' [FAIL]'
	DB	' Debug %X %X', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GDLBNFAF@?5?$FLFAIL?$FN?5Divide?5?$CFX?5?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BG@GDLBNFAF@?5?$FLFAIL?$FN?5Divide?5?$CFX?5?$CFX?6?$AA@ DB ' [FAIL'
	DB	'] Divide %X %X', 0aH, 00H			; `string'
_Exception DD	FLAT:_exception
_exception DD	FLAT:_IException_Install
PUBLIC	_IException_Install
PUBLIC	_Virtualization
PUBLIC	_SimdFpu
PUBLIC	_Machine
PUBLIC	_Alignment
PUBLIC	_FpuMath
PUBLIC	_PageFault
PUBLIC	_GeneralProtection
PUBLIC	_SegmentFault
PUBLIC	_SegmentNotPresent
PUBLIC	_InvalidTss
PUBLIC	_FpuSegmentOverrun
PUBLIC	_DoubleFault
PUBLIC	_FpuNotAvailable
PUBLIC	_InvalidOpcode
PUBLIC	_BoundRangeExceeded
PUBLIC	_Overflow
PUBLIC	_Breakpoint
PUBLIC	_NmiInterrupt
PUBLIC	_DebugIrq
PUBLIC	_Divide
PUBLIC	_DebugContext
PUBLIC	_Install_DeathLoop
PUBLIC	_Crash
?text@?1??DebugContext@@9@9 DB 0100H DUP (?)		; `DebugContext'::`2'::text
_BSS	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_Crash	PROC

; 59   :     Logger(" [FAIL] Crashing Gracefully\n");
; 60   : 
; 61   :     CTask *TaskPool = (CTask*)MMAP_TASKPOOL;
; 62   :     int pid = Thread->GetPid();

	mov	eax, DWORD PTR _Thread
	push	esi
	push	edi
	call	DWORD PTR [eax+8]

; 63   : 
; 64   :     CContext *ctx = (CContext*)TaskPool->CtxList[pid];
; 65   :     Logger(" pid        = %X\n", pid         );
; 66   :     Logger(" ctx        = %X\n", ctx         );
; 67   : 
; 68   :     CPcb *pcb = (CPcb*)TaskPool->PcbList[pid];
; 69   :     Logger(" pcb        = %X\n", pcb         );
; 70   : 
; 71   :     CPeb *peb = (CPeb*)TaskPool->PebList[pid];
; 72   :     Logger(" peb        = %X\n", peb         );
; 73   :     Logger(" ctx.cr3    = %X\n", ctx->cr3   );
; 74   :     Logger(" ctx.ds     = %X\n", ctx->ds    );
; 75   :     Logger(" ctx.edi    = %X\n", ctx->edi   );
; 76   :     Logger(" ctx.esi    = %X\n", ctx->esi   );
; 77   :     Logger(" ctx.ebp    = %X\n", ctx->ebp   );
; 78   :     Logger(" ctx.esp    = %X\n", ctx->esp   );
; 79   :     Logger(" ctx.ebx    = %X\n", ctx->ebx   );
; 80   :     Logger(" ctx.edx    = %X\n", ctx->edx   );
; 81   :     Logger(" ctx.ecx    = %X\n", ctx->ecx   );
; 82   :     Logger(" ctx.eax    = %X\n", ctx->eax   );
; 83   :     Logger(" ctx.eip    = %X\n", ctx->eip   );
; 84   :     Logger(" ctx.cs     = %X\n", ctx->cs    );
; 85   :     Logger(" ctx.eflags = %X\n", ctx->eflags);
; 86   :     Logger(" ctx.esp0   = %X\n", ctx->esp0  );
; 87   :     Logger(" ctx.ss     = %X\n", ctx->ss    );
; 88   :     Logger(" ctx.pid    = %X\n", ctx->pid   );
; 89   :     Logger("\n");
; 90   : 
; 91   :     Logger(" peb        = %X\n", peb         );
; 92   :     Logger(" ctx.cr3    = %X\n", ctx->cr3   );
; 93   :     Logger(" ctx.ds     = %X\n", ctx->ds    );
; 94   :     Logger(" ctx.edi    = %X\n", ctx->edi   );
; 95   :     Logger(" ctx.esi    = %X\n", ctx->esi   );
; 96   :     Logger(" ctx.ebp    = %X\n", ctx->ebp   );
; 97   :     Logger(" ctx.esp    = %X\n", ctx->esp   );
; 98   :     Logger(" ctx.ebx    = %X\n", ctx->ebx   );
; 99   :     Logger(" ctx.edx    = %X\n", ctx->edx   );
; 100  :     Logger(" ctx.ecx    = %X\n", ctx->ecx   );
; 101  :     Logger(" ctx.eax    = %X\n", ctx->eax   );
; 102  :     Logger(" ctx.eip    = %X\n", ctx->eip   );
; 103  :     Logger(" ctx.cs     = %X\n", ctx->cs    );
; 104  :     Logger(" ctx.eflags = %X\n", ctx->eflags);
; 105  :     Logger(" ctx.esp0   = %X\n", ctx->esp0  );
; 106  :     Logger(" ctx.ss     = %X\n", ctx->ss    );
; 107  :     Logger(" ctx.pid    = %X\n", ctx->pid   );
; 108  :     Logger("\n");
; 109  : 
; 110  :     CCanvas *canvas = peb->Canvas;

	mov	ecx, DWORD PTR ds:1700

; 111  :     stosd(canvas->Draw, 0x00AF2F2F, canvas->ResY*canvas->ScanLine/4);

	mov	edi, 11480879				; 00af2f2fH
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	esi, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [esi+36]
	imul	eax, DWORD PTR [esi+52]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	push	eax
	push	edi
	push	DWORD PTR [esi+32]
	call	_stosd

; 112  :     stosd(canvas->Disp, 0x00AF2F2F, canvas->ResY*canvas->ScanLine/4);

	mov	eax, DWORD PTR [esi+36]
	imul	eax, DWORD PTR [esi+52]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	push	eax
	push	edi
	push	DWORD PTR [esi+28]
	call	_stosd

; 113  :     Thread->Exit(-1);

	mov	eax, DWORD PTR _Thread
	push	-1
	call	DWORD PTR [eax+28]
	add	esp, 28					; 0000001cH
$LL2@Crash:

; 114  :     for (;;);

	jmp	SHORT $LL2@Crash
_Crash	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_callback$ = 8						; size = 4
_Install_DeathLoop PROC

; 118  :     if (!DeathLoop) DeathLoop = callback;

	cmp	DWORD PTR _DeathLoop, 0
	jne	SHORT $LN1@Install_De
	mov	eax, DWORD PTR _callback$[esp-4]
	mov	DWORD PTR _DeathLoop, eax
$LN1@Install_De:

; 119  :     return true;

	xor	eax, eax
	inc	eax

; 120  : }

	ret	0
_Install_DeathLoop ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_format$ = 8						; size = 4
_DebugContext PROC

; 123  :     static char text[256];
; 124  : 
; 125  : 	va_list *list;
; 126  :     va_start(list, format);
; 127  : 	VaFormat(text, format, list);

	lea	eax, DWORD PTR _format$[esp]
	push	eax
	push	DWORD PTR _format$[esp]
	push	OFFSET ?text@?1??DebugContext@@9@9
	call	DWORD PTR __imp__VaFormat

; 128  : 	va_end(list);
; 129  : 
; 130  :     CTask *TaskPool = (CTask*)MMAP_TASKPOOL;
; 131  :     int pid = Thread->GetPid();

	mov	eax, DWORD PTR _Thread
	add	esp, 12					; 0000000cH
	call	DWORD PTR [eax+8]

; 132  :     CContext *ctx = (CContext*)TaskPool->CtxList[pid];

	mov	ecx, DWORD PTR ds:1692
	mov	ecx, DWORD PTR [ecx+eax*4]

; 133  :     ctx->eip = (DeathLoop) ? (int)DeathLoop : (int)Crash;

	mov	eax, DWORD PTR _DeathLoop
	test	eax, eax
	jne	SHORT $LN7@DebugConte
	mov	eax, OFFSET _Crash
$LN7@DebugConte:
	mov	DWORD PTR [ecx+40], eax

; 134  :     return true;

	xor	eax, eax
	inc	eax

; 135  : }

	ret	0
_DebugContext ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_Divide	PROC

; 138  :     DebugContext(" [FAIL] Divide %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0BG@GDLBNFAF@?5?$FLFAIL?$FN?5Divide?5?$CFX?5?$CFX?6?$AA@
	call	_DebugContext

; 139  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 140  : }

	ret	0
_Divide	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_DebugIrq PROC

; 143  :     DebugContext(" [FAIL] Debug %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0BF@OGHHPALA@?5?$FLFAIL?$FN?5Debug?5?$CFX?5?$CFX?6?$AA@
	call	_DebugContext

; 144  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 145  : }

	ret	0
_DebugIrq ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_NmiInterrupt PROC

; 148  :     DebugContext(" [FAIL] Nmi Interrupt %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0BN@KFJKEHOG@?5?$FLFAIL?$FN?5Nmi?5Interrupt?5?$CFX?5?$CFX?6?$AA@
	call	_DebugContext

; 149  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 150  : }

	ret	0
_NmiInterrupt ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_Breakpoint PROC

; 153  :     DebugContext(" [FAIL] Breakpoint %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0BK@FIAGMOJB@?5?$FLFAIL?$FN?5Breakpoint?5?$CFX?5?$CFX?6?$AA@
	call	_DebugContext

; 154  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 155  : }

	ret	0
_Breakpoint ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_Overflow PROC

; 158  :     DebugContext(" [FAIL] Overflow %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0BI@BPADGLLA@?5?$FLFAIL?$FN?5Overflow?5?$CFX?5?$CFX?6?$AA@
	call	_DebugContext

; 159  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 160  : }

	ret	0
_Overflow ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_BoundRangeExceeded PROC

; 163  :     DebugContext(" [FAIL] Bound Range Exceeded %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0CE@MJKBANIJ@?5?$FLFAIL?$FN?5Bound?5Range?5Exceeded?5?$CFX?5@
	call	_DebugContext

; 164  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 165  : }

	ret	0
_BoundRangeExceeded ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_InvalidOpcode PROC

; 168  :     DebugContext(" [FAIL] Invalid Opcode %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0BO@CAHBGDHK@?5?$FLFAIL?$FN?5Invalid?5Opcode?5?$CFX?5?$CFX?6?$AA@
	call	_DebugContext

; 169  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 170  : }

	ret	0
_InvalidOpcode ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_FpuNotAvailable PROC

; 173  :     DebugContext(" [FAIL] Fpu Not Available %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0CB@CMIGMBEJ@?5?$FLFAIL?$FN?5Fpu?5Not?5Available?5?$CFX?5?$CFX?6@
	call	_DebugContext

; 174  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 175  : }

	ret	0
_FpuNotAvailable ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_DoubleFault PROC

; 178  :     DebugContext(" [FAIL] Double Fault %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0BM@KBPNPDDD@?5?$FLFAIL?$FN?5Double?5Fault?5?$CFX?5?$CFX?6?$AA@
	call	_DebugContext

; 179  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 180  : }

	ret	0
_DoubleFault ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_FpuSegmentOverrun PROC

; 183  :     DebugContext(" [FAIL] Fpu Segment Overrun %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0CD@CALALKNE@?5?$FLFAIL?$FN?5Fpu?5Segment?5Overrun?5?$CFX?5?$CF@
	call	_DebugContext

; 184  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 185  : }

	ret	0
_FpuSegmentOverrun ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_InvalidTss PROC

; 188  :     DebugContext(" [FAIL] Invalid Tss %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0BL@MHFKIHDL@?5?$FLFAIL?$FN?5Invalid?5Tss?5?$CFX?5?$CFX?6?$AA@
	call	_DebugContext

; 189  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 190  : }

	ret	0
_InvalidTss ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_SegmentNotPresent PROC

; 193  :     DebugContext(" [FAIL] Segment Not Present %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0CD@IPMLNEGJ@?5?$FLFAIL?$FN?5Segment?5Not?5Present?5?$CFX?5?$CF@
	call	_DebugContext

; 194  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 195  : }

	ret	0
_SegmentNotPresent ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_SegmentFault PROC

; 198  :     DebugContext(" [FAIL] Segment Fault %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0BN@PJFKLOBC@?5?$FLFAIL?$FN?5Segment?5Fault?5?$CFX?5?$CFX?6?$AA@
	call	_DebugContext

; 199  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 200  : }

	ret	0
_SegmentFault ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_GeneralProtection PROC

; 203  :     DebugContext(" [FAIL] General Protection %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0CC@HOIEGFBB@?5?$FLFAIL?$FN?5General?5Protection?5?$CFX?5?$CFX@
	call	_DebugContext

; 204  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 205  : }

	ret	0
_GeneralProtection ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_PageFault PROC

; 208  :     DebugContext(" [FAIL] Page Fault %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0BK@NKFDNADC@?5?$FLFAIL?$FN?5Page?5Fault?5?$CFX?5?$CFX?6?$AA@
	call	_DebugContext

; 209  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 210  : }

	ret	0
_PageFault ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_FpuMath PROC

; 213  :     DebugContext(" [FAIL] Fpu Math %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0BI@OBOGMKIE@?5?$FLFAIL?$FN?5Fpu?5Math?5?$CFX?5?$CFX?6?$AA@
	call	_DebugContext

; 214  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 215  : }

	ret	0
_FpuMath ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_Alignment PROC

; 218  :     DebugContext(" [FAIL] Alignment %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0BJ@OGKJPLO@?5?$FLFAIL?$FN?5Alignment?5?$CFX?5?$CFX?6?$AA@
	call	_DebugContext

; 219  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 220  : }

	ret	0
_Alignment ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_Machine PROC

; 223  :     DebugContext(" [FAIL] Machine %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0BH@EGJCDAFL@?5?$FLFAIL?$FN?5Machine?5?$CFX?5?$CFX?6?$AA@
	call	_DebugContext

; 224  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 225  : }

	ret	0
_Machine ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_mxcsr$ = -4						; size = 4
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_SimdFpu PROC

; 227  : u32 SimdFpu(u32 err, u32 esp) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 228  :     u32 mxcsr;
; 229  :     stmxcsr(&mxcsr);

	lea	eax, DWORD PTR _mxcsr$[ebp]
	push	eax
	call	_stmxcsr

; 230  :     Logger("MXCSR_IE  = %X\n", (mxcsr & MXCSR_IE ) ? 1 : 0);
; 231  :     Logger("MXCSR_IE  = %X\n", (mxcsr & MXCSR_IE ) ? 1 : 0);
; 232  :     Logger("MXCSR_DE  = %X\n", (mxcsr & MXCSR_DE ) ? 1 : 0);
; 233  :     Logger("MXCSR_ZE  = %X\n", (mxcsr & MXCSR_ZE ) ? 1 : 0);
; 234  :     Logger("MXCSR_OE  = %X\n", (mxcsr & MXCSR_OE ) ? 1 : 0);
; 235  :     Logger("MXCSR_UE  = %X\n", (mxcsr & MXCSR_UE ) ? 1 : 0);
; 236  :     Logger("MXCSR_PE  = %X\n", (mxcsr & MXCSR_PE ) ? 1 : 0);
; 237  :     Logger("MXCSR_DAZ = %X\n", (mxcsr & MXCSR_DAZ) ? 1 : 0);
; 238  :     Logger("MXCSR_IM  = %X\n", (mxcsr & MXCSR_IM ) ? 1 : 0);
; 239  :     Logger("MXCSR_DM  = %X\n", (mxcsr & MXCSR_DM ) ? 1 : 0);
; 240  :     Logger("MXCSR_ZM  = %X\n", (mxcsr & MXCSR_ZM ) ? 1 : 0);
; 241  :     Logger("MXCSR_OM  = %X\n", (mxcsr & MXCSR_OM ) ? 1 : 0);
; 242  :     Logger("MXCSR_UM  = %X\n", (mxcsr & MXCSR_UM ) ? 1 : 0);
; 243  :     Logger("MXCSR_PM  = %X\n", (mxcsr & MXCSR_PM ) ? 1 : 0);
; 244  :     Logger("MXCSR_RC  = %X\n", (mxcsr & MXCSR_RC ) ? 1 : 0);
; 245  :     Logger("MXCSR_FZ  = %X\n", (mxcsr & MXCSR_FZ ) ? 1 : 0);
; 246  :     DebugContext(" [FAIL] Simd Fpu %X %X\n", err, esp);

	push	DWORD PTR _esp$[ebp]
	push	DWORD PTR _err$[ebp]
	push	OFFSET ??_C@_0BI@CKGJIKKF@?5?$FLFAIL?$FN?5Simd?5Fpu?5?$CFX?5?$CFX?6?$AA@
	call	_DebugContext

; 247  :     return esp;

	mov	eax, DWORD PTR _esp$[ebp]
	add	esp, 16					; 00000010H

; 248  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_SimdFpu ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_err$ = 8						; size = 4
_esp$ = 12						; size = 4
_Virtualization PROC

; 251  :     DebugContext(" [FAIL] Virtualization  %X %X\n", err, esp);

	push	DWORD PTR _esp$[esp-4]
	push	DWORD PTR _err$[esp]
	push	OFFSET ??_C@_0BP@KLPCCEPC@?5?$FLFAIL?$FN?5Virtualization?5?5?$CFX?5?$CFX?6?$AA@
	call	_DebugContext

; 252  :     return esp;

	mov	eax, DWORD PTR _esp$[esp+8]
	add	esp, 12					; 0000000cH

; 253  : }

	ret	0
_Virtualization ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\fyp\develop\spartan\source\kernel\thread\exception\exception.c
_TEXT	SEGMENT
_IException_Install PROC

; 256  :     Device->Latch(0x00, Divide            );

	mov	eax, DWORD PTR _Device
	push	OFFSET _Divide
	push	0
	call	DWORD PTR [eax]

; 257  :     Device->Latch(0x01, DebugIrq          );

	mov	eax, DWORD PTR _Device
	push	OFFSET _DebugIrq
	push	1
	call	DWORD PTR [eax]

; 258  :     Device->Latch(0x02, NmiInterrupt      );

	mov	eax, DWORD PTR _Device
	push	OFFSET _NmiInterrupt
	push	2
	call	DWORD PTR [eax]

; 259  :     Device->Latch(0x03, Breakpoint        );

	mov	eax, DWORD PTR _Device
	push	OFFSET _Breakpoint
	push	3
	call	DWORD PTR [eax]

; 260  :     Device->Latch(0x04, Overflow          );

	mov	eax, DWORD PTR _Device
	push	OFFSET _Overflow
	push	4
	call	DWORD PTR [eax]

; 261  :     Device->Latch(0x05, BoundRangeExceeded);

	mov	eax, DWORD PTR _Device
	push	OFFSET _BoundRangeExceeded
	push	5
	call	DWORD PTR [eax]

; 262  :     Device->Latch(0x06, InvalidOpcode     );

	mov	eax, DWORD PTR _Device
	push	OFFSET _InvalidOpcode
	push	6
	call	DWORD PTR [eax]

; 263  :     Device->Latch(0x07, FpuNotAvailable   );

	mov	eax, DWORD PTR _Device
	push	OFFSET _FpuNotAvailable
	push	7
	call	DWORD PTR [eax]

; 264  :     Device->Latch(0x08, DoubleFault       );

	mov	eax, DWORD PTR _Device
	add	esp, 64					; 00000040H
	push	OFFSET _DoubleFault
	push	8
	call	DWORD PTR [eax]

; 265  :     Device->Latch(0x09, FpuSegmentOverrun );

	mov	eax, DWORD PTR _Device
	push	OFFSET _FpuSegmentOverrun
	push	9
	call	DWORD PTR [eax]

; 266  :     Device->Latch(0x0A, InvalidTss        );

	mov	eax, DWORD PTR _Device
	push	OFFSET _InvalidTss
	push	10					; 0000000aH
	call	DWORD PTR [eax]

; 267  :     Device->Latch(0x0B, SegmentNotPresent );

	mov	eax, DWORD PTR _Device
	push	OFFSET _SegmentNotPresent
	push	11					; 0000000bH
	call	DWORD PTR [eax]

; 268  :     Device->Latch(0x0C, SegmentFault      );

	mov	eax, DWORD PTR _Device
	push	OFFSET _SegmentFault
	push	12					; 0000000cH
	call	DWORD PTR [eax]

; 269  :     Device->Latch(0x0D, GeneralProtection );

	mov	eax, DWORD PTR _Device
	push	OFFSET _GeneralProtection
	push	13					; 0000000dH
	call	DWORD PTR [eax]

; 270  :     Device->Latch(0x0E, PageFault         );

	mov	eax, DWORD PTR _Device
	push	OFFSET _PageFault
	push	14					; 0000000eH
	call	DWORD PTR [eax]

; 271  :     Device->Latch(0x10, FpuMath           );

	mov	eax, DWORD PTR _Device
	push	OFFSET _FpuMath
	push	16					; 00000010H
	call	DWORD PTR [eax]

; 272  :     Device->Latch(0x11, Alignment         );

	mov	eax, DWORD PTR _Device
	add	esp, 64					; 00000040H
	push	OFFSET _Alignment
	push	17					; 00000011H
	call	DWORD PTR [eax]

; 273  :     Device->Latch(0x12, Machine           );

	mov	eax, DWORD PTR _Device
	push	OFFSET _Machine
	push	18					; 00000012H
	call	DWORD PTR [eax]

; 274  :     Device->Latch(0x13, SimdFpu           );

	mov	ecx, DWORD PTR _Device
	push	OFFSET _SimdFpu
	push	19					; 00000013H
	call	DWORD PTR [ecx]

; 275  :     Device->Latch(0x14, Virtualization    );

	mov	ecx, DWORD PTR _Device
	push	OFFSET _Virtualization
	push	20					; 00000014H
	call	DWORD PTR [ecx]

; 276  :     return true;

	xor	eax, eax
	add	esp, 32					; 00000020H
	inc	eax

; 277  : }

	ret	0
_IException_Install ENDP
_TEXT	ENDS
END
