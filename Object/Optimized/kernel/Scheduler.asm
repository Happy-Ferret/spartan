; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\cex123\Desktop\XXXXX\osdev\osdev-216\Source\Kernel\Thread\Scheduler\Scheduler.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_04KKJBFIJG@TASK?$AA@			; `string'
;	COMDAT ??_C@_04KKJBFIJG@TASK?$AA@
CONST	SEGMENT
??_C@_04KKJBFIJG@TASK?$AA@ DB 'TASK', 00H		; `string'
PUBLIC	_InstallScheduler
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-216\source\kernel\thread\scheduler\scheduler.c
_TEXT	SEGMENT
_base$ = 8						; size = 4
_size$ = 12						; size = 4
_InstallScheduler PROC

; 6    : bool InstallScheduler(u8 *base, u32 size) {

	push	ebp
	push	esi

; 7    :     CTask *TaskPool = (CTask*)MMAP_TASKPOOL;
; 8    :     stosd(TaskPool, 0, sizeof(CTask)/4);

	push	19					; 00000013H
	xor	esi, esi
	mov	ebp, 1664				; 00000680H
	push	esi
	push	ebp
	call	_stosd

; 9    : 
; 10   :     if (!(TaskPool->Tss     = (CTss*)Monitor->GetBase('TSS '))) return false;

	mov	eax, DWORD PTR _Monitor
	push	1414746912				; 54535320H
	call	DWORD PTR [eax+24]
	add	esp, 16					; 00000010H
	mov	DWORD PTR ds:1668, eax
	test	eax, eax
	jne	SHORT $LN8@InstallSch
$LN14@InstallSch:
	xor	eax, eax
	jmp	$LN9@InstallSch
$LN8@InstallSch:

; 11   :     if (!(TaskPool->Node    = (char*)Monitor->GetBase('TASK'))) return false;

	mov	eax, DWORD PTR _Monitor
	push	1413567307				; 5441534bH
	call	DWORD PTR [eax+24]
	mov	DWORD PTR ds:1672, eax
	pop	ecx
	test	eax, eax
	je	SHORT $LN14@InstallSch

; 12   :     if (!(TaskPool->ReadyQ  = (int *)Monitor->GetBase('RDYQ'))) return false;

	mov	eax, DWORD PTR _Monitor
	push	edi
	mov	edi, 1380211025				; 52445951H
	push	edi
	call	DWORD PTR [eax+24]
	mov	DWORD PTR ds:1704, eax
	pop	ecx
	test	eax, eax
	je	$LN11@InstallSch
$LN6@InstallSch:

; 13   :     if (!(TaskPool->BlockQ  = (int *)Monitor->GetBase('BLKQ'))) return false;

	mov	eax, DWORD PTR _Monitor
	push	ebx
	mov	ebx, 1112296273				; 424c4b51H
	push	ebx
	call	DWORD PTR [eax+24]
	mov	DWORD PTR ds:1708, eax
	pop	ecx
	test	eax, eax
	je	SHORT $LN13@InstallSch

; 14   :     if (!(TaskPool->KillQ   = (int *)Monitor->GetBase('KILL'))) return false;

	mov	eax, DWORD PTR _Monitor
	push	1263094860				; 4b494c4cH
	call	DWORD PTR [eax+24]
	mov	DWORD PTR ds:1712, eax
	pop	ecx
	test	eax, eax
	je	SHORT $LN13@InstallSch

; 15   :     if (!(TaskPool->CtxList = (int *)Monitor->GetBase('CTX '))) return false;

	mov	eax, DWORD PTR _Monitor
	push	1129601056				; 43545820H
	call	DWORD PTR [eax+24]
	mov	DWORD PTR ds:1692, eax
	pop	ecx
	test	eax, eax
	je	SHORT $LN13@InstallSch

; 16   :     if (!(TaskPool->PcbList = (int *)Monitor->GetBase('PCB '))) return false;

	mov	eax, DWORD PTR _Monitor
	push	1346585120				; 50434220H
	call	DWORD PTR [eax+24]
	mov	DWORD PTR ds:1696, eax
	pop	ecx
	test	eax, eax
	je	SHORT $LN13@InstallSch

; 17   :     if (!(TaskPool->PebList = (int *)Monitor->GetBase('PEB '))) return false;

	mov	eax, DWORD PTR _Monitor
	push	1346716192				; 50454220H
	call	DWORD PTR [eax+24]
	mov	DWORD PTR ds:1700, eax
	pop	ecx
	test	eax, eax
	jne	SHORT $LN1@InstallSch
$LN13@InstallSch:
	xor	eax, eax
	jmp	$LN12@InstallSch
$LN1@InstallSch:

; 18   : 
; 19   :     stosd(TaskPool->ReadyQ,  0, Monitor->GetSize('RDYQ')/4);

	mov	eax, DWORD PTR _Monitor
	push	edi
	call	DWORD PTR [eax+28]
	shr	eax, 2
	push	eax
	push	esi
	push	DWORD PTR ds:1704
	call	_stosd

; 20   :     stosd(TaskPool->BlockQ,  0, Monitor->GetSize('BLKQ')/4);

	mov	eax, DWORD PTR _Monitor
	push	ebx
	call	DWORD PTR [eax+28]
	shr	eax, 2
	push	eax
	push	esi
	push	DWORD PTR ds:1708
	call	_stosd

; 21   :     stosd(TaskPool->KillQ,   0, Monitor->GetSize('KILL')/4);

	mov	eax, DWORD PTR _Monitor
	push	1263094860				; 4b494c4cH
	call	DWORD PTR [eax+28]
	shr	eax, 2
	push	eax
	push	esi
	push	DWORD PTR ds:1712
	call	_stosd

; 22   :     stosd(TaskPool->CtxList, 0, Monitor->GetSize('CTX ')/4);

	mov	eax, DWORD PTR _Monitor
	push	1129601056				; 43545820H
	call	DWORD PTR [eax+28]
	shr	eax, 2
	push	eax
	push	esi
	push	DWORD PTR ds:1692
	call	_stosd

; 23   :     stosd(TaskPool->PcbList, 0, Monitor->GetSize('PCB ')/4);

	mov	eax, DWORD PTR _Monitor
	add	esp, 64					; 00000040H
	push	1346585120				; 50434220H
	call	DWORD PTR [eax+28]
	shr	eax, 2
	push	eax
	push	esi
	push	DWORD PTR ds:1696
	call	_stosd

; 24   :     stosd(TaskPool->PebList, 0, Monitor->GetSize('PEB ')/4);

	mov	eax, DWORD PTR _Monitor
	push	1346716192				; 50454220H
	call	DWORD PTR [eax+28]
	shr	eax, 2
	push	eax
	push	esi
	push	DWORD PTR ds:1700
	call	_stosd

; 25   : 
; 26   :     void *node = TaskPool->Node;
; 27   :     void *data = TaskPool->CtxList;
; 28   : 
; 29   :     Pool->CreateMeta((CPool*)TaskPool, 4*KB, 4, node, data, "TASK");

	mov	eax, DWORD PTR _Pool
	push	OFFSET ??_C@_04KKJBFIJG@TASK?$AA@
	push	DWORD PTR ds:1692
	push	DWORD PTR ds:1672
	push	4
	push	4096					; 00001000H
	push	ebp
	call	DWORD PTR [eax]

; 30   :     Monitor->Protect('IVT ');

	mov	eax, DWORD PTR _Monitor
	push	1230394400				; 49565420H
	call	DWORD PTR [eax+20]

; 31   :     Monitor->Protect('TASK');

	mov	eax, DWORD PTR _Monitor
	push	1413567307				; 5441534bH
	call	DWORD PTR [eax+20]

; 32   :     Monitor->Protect('RDYQ');

	mov	eax, DWORD PTR _Monitor
	add	esp, 64					; 00000040H
	push	edi
	call	DWORD PTR [eax+20]

; 33   :     Monitor->Protect('BLKQ');

	mov	eax, DWORD PTR _Monitor
	push	ebx
	call	DWORD PTR [eax+20]

; 34   :     Monitor->Protect('KILL');

	mov	eax, DWORD PTR _Monitor
	push	1263094860				; 4b494c4cH
	call	DWORD PTR [eax+20]

; 35   :     Monitor->Protect('CTX ');

	mov	eax, DWORD PTR _Monitor
	push	1129601056				; 43545820H
	call	DWORD PTR [eax+20]

; 36   :     Monitor->Protect('PCB ');

	mov	eax, DWORD PTR _Monitor
	push	1346585120				; 50434220H
	call	DWORD PTR [eax+20]

; 37   :     Monitor->Protect('PEB ');

	mov	eax, DWORD PTR _Monitor
	push	1346716192				; 50454220H
	call	DWORD PTR [eax+20]

; 38   :     return true;

	xor	eax, eax
	add	esp, 24					; 00000018H
	inc	eax
$LN12@InstallSch:
	pop	ebx
$LN11@InstallSch:
	pop	edi
$LN9@InstallSch:
	pop	esi
	pop	ebp

; 39   : }

	ret	0
_InstallScheduler ENDP
_TEXT	ENDS
END
