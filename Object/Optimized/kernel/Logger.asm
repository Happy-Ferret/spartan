; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\cex123\Desktop\XXXXX\osdev\osdev-216\Source\Kernel\Monitor\Logger.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp__VaFormat:PROC
PUBLIC	_Logger
PUBLIC	_Debug
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-216\source\kernel\monitor\logger.c
_TEXT	SEGMENT
_text$ = -1024						; size = 1024
_format$ = 8						; size = 4
_Debug	PROC

; 19   : export int Debug(char *format, ... ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 1024				; 00000400H

; 20   :     if (!format) return 0;

	cmp	DWORD PTR _format$[ebp], 0
	jne	SHORT $LN6@Debug
	xor	eax, eax
	jmp	SHORT $LN8@Debug
$LN6@Debug:
	push	esi

; 21   : 	char text[0x400];
; 22   : 
; 23   : 	va_list *list;
; 24   :     va_start(list, format);
; 25   : 	VaFormat(text, format, list);

	lea	eax, DWORD PTR _format$[ebp+4]
	push	eax
	push	DWORD PTR _format$[ebp]
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	DWORD PTR __imp__VaFormat

; 26   : 	va_end(list);
; 27   : 
; 28   :     for (char *c = text; *c; c++) {

	mov	al, BYTE PTR _text$[ebp]
	lea	esi, DWORD PTR _text$[ebp]
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN14@Debug
$LL3@Debug:

; 29   :         outb(0xE9, *c);

	movsx	eax, al
	push	eax
	push	233					; 000000e9H
	call	_outb
	inc	esi
	pop	ecx
	pop	ecx
	mov	al, BYTE PTR [esi]
$LN14@Debug:

; 26   : 	va_end(list);
; 27   : 
; 28   :     for (char *c = text; *c; c++) {

	test	al, al
	jne	SHORT $LL3@Debug

; 30   :     }
; 31   :     return 1;

	xor	eax, eax
	inc	eax
	pop	esi
$LN8@Debug:

; 32   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Debug	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-216\source\kernel\monitor\logger.c
_TEXT	SEGMENT
_text$ = -1024						; size = 1024
_format$ = 8						; size = 4
_Logger	PROC

; 4    : export int Logger(char *format, ... ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 1024				; 00000400H

; 5    :     if (!format) return 0;

	cmp	DWORD PTR _format$[ebp], 0
	jne	SHORT $LN6@Logger
	xor	eax, eax
	jmp	SHORT $LN8@Logger
$LN6@Logger:
	push	esi

; 6    : 	char text[0x400];
; 7    : 
; 8    : 	va_list *list;
; 9    :     va_start(list, format);
; 10   : 	VaFormat(text, format, list);

	lea	eax, DWORD PTR _format$[ebp+4]
	push	eax
	push	DWORD PTR _format$[ebp]
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	DWORD PTR __imp__VaFormat

; 11   : 	va_end(list);
; 12   : 
; 13   :     for (char *c = text; *c; c++) {

	mov	al, BYTE PTR _text$[ebp]
	lea	esi, DWORD PTR _text$[ebp]
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN14@Logger
$LL3@Logger:

; 14   :         outb(0xE9, *c);

	movsx	eax, al
	push	eax
	push	233					; 000000e9H
	call	_outb
	inc	esi
	pop	ecx
	pop	ecx
	mov	al, BYTE PTR [esi]
$LN14@Logger:

; 11   : 	va_end(list);
; 12   : 
; 13   :     for (char *c = text; *c; c++) {

	test	al, al
	jne	SHORT $LL3@Logger

; 15   :     }
; 16   :     return 1;

	xor	eax, eax
	inc	eax
	pop	esi
$LN8@Logger:

; 17   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Logger	ENDP
_TEXT	ENDS
END
