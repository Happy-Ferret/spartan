; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\cex123\Desktop\XXXXX\osdev\osdev-211\Source\Applications\Fps\Engine.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	__fltused:DWORD
COMM	_bot:BYTE:0240H
COMM	_voxel:DWORD
COMM	_cam:BYTE:018H
COMM	_f:DWORD
COMM	_voxelx:DWORD
COMM	_voxely:DWORD
COMM	_voxelz:DWORD
COMM	_xx:DWORD
COMM	_xy:DWORD
COMM	_xz:DWORD
COMM	_yx:DWORD
COMM	_yy:DWORD
COMM	_yz:DWORD
COMM	_zx:DWORD
COMM	_zy:DWORD
COMM	_zz:DWORD
_DATA	ENDS
_BSS	SEGMENT
?sample@?1??AudioThread@@9@9 DD 01H DUP (?)		; `AudioThread'::`2'::sample
_BSS	ENDS
PUBLIC	_fsin
PUBLIC	_fcos
PUBLIC	_fsqrt
PUBLIC	_sfrand
PUBLIC	_frand
PUBLIC	_ISpeaker_SetHerz
PUBLIC	_AudioThread
PUBLIC	_Reset
PUBLIC	_Control
PUBLIC	_Physics
PUBLIC	_Draw
PUBLIC	_Game
PUBLIC	__ftol2_sse
PUBLIC	__real@3d000000
PUBLIC	__real@3e000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@40400000
PUBLIC	__real@42000000
PUBLIC	__real@43400000
PUBLIC	__real@43800000
PUBLIC	__real@bd000000
PUBLIC	__real@be000000
PUBLIC	__real@bfc90fdb
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_outb:PROC
EXTRN	__imp__Memory:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bfc90fdb
CONST	SEGMENT
__real@bfc90fdb DD 0bfc90fdbr			; -1.5708
CONST	ENDS
;	COMDAT __real@be000000
CONST	SEGMENT
__real@be000000 DD 0be000000r			; -0.125
CONST	ENDS
;	COMDAT __real@bd000000
CONST	SEGMENT
__real@bd000000 DD 0bd000000r			; -0.03125
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@43400000
CONST	SEGMENT
__real@43400000 DD 043400000r			; 192
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3d000000
CONST	SEGMENT
__real@3d000000 DD 03d000000r			; 0.03125
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-211\source\applications\fps\engine.c
_TEXT	SEGMENT
__ftol2_sse PROC

; 355  : 	_asm push      ebp                         ; 55

	push	ebp

; 356  :     _asm mov       ebp, esp                    ; 8B EC

	mov	ebp, esp

; 357  :     _asm sub       esp, 0x8                    ; 83 EC 08

	sub	esp, 8

; 358  :     _asm and       esp, 0xFFFFFFF8             ; 83 E4 F8

	and	esp, -8					; fffffff8H

; 359  :     _asm fstp      qword ptr [esp + 0x00]      ; DD 1C 24

	fstp	QWORD PTR [esp]

; 360  :     _asm cvttsd2si eax, qword ptr [esp + 0x00] ; F2 0F 2C 04 24

	cvttsd2si eax, DWORD PTR [esp]

; 361  :     _asm leave                                 ; C9

	leave

; 362  :     _asm retn                                  ; C3

	ret	0
__ftol2_sse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-211\source\applications\fps\engine.c
_TEXT	SEGMENT
_window$ = 8						; size = 4
_keybrd$ = 12						; size = 4
_y$ = 16						; size = 4
_Game	PROC

; 346  :     Control(keybrd);

	push	DWORD PTR _keybrd$[esp-4]
	call	_Control

; 347  :     Physics();

	call	_Physics

; 348  :     return Draw(window, y);

	push	DWORD PTR _y$[esp]
	push	DWORD PTR _window$[esp+4]
	call	_Draw
	add	esp, 12					; 0000000cH

; 349  : }

	ret	0
_Game	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-211\source\applications\fps\engine.c
_TEXT	SEGMENT
_sidex$1$ = -140					; size = 4
_i$1$ = -140						; size = 4
$T1 = -140						; size = 4
_n$ = -140						; size = 4
tv942 = -136						; size = 4
$T2 = -136						; size = 4
_n$ = -136						; size = 4
_dirx$3 = -132						; size = 4
_ray$1$ = -128						; size = 4
_ray$2$ = -124						; size = 4
_sidey$1$ = -120					; size = 4
tv945 = -120						; size = 4
_ray$3$ = -116						; size = 4
_diry$4 = -112						; size = 4
_ray$7$ = -108						; size = 4
tv933 = -104						; size = 4
_ray$9$ = -100						; size = 4
tv931 = -96						; size = 4
tv926 = -92						; size = 4
_stepz$1$ = -88						; size = 4
_x$1$ = -84						; size = 4
tv938 = -80						; size = 4
_canvas$1$ = -76					; size = 4
_dirz$5 = -76						; size = 4
tv950 = -72						; size = 4
_ResY$1$ = -68						; size = 4
_y$1$ = -64						; size = 4
tv941 = -60						; size = 4
tv923 = -56						; size = 4
_stepy$1$ = -52						; size = 4
_stepx$1$ = -48						; size = 4
tv929 = -44						; size = 4
_ray$5$ = -40						; size = 4
_v$1$ = -36						; size = 4
tv925 = -32						; size = 4
_x1$1$ = -28						; size = 4
_pixel$1$ = -24						; size = 4
_ResX$1$ = -20						; size = 4
_deltax$1$ = -16					; size = 4
tv922 = -12						; size = 4
tv947 = -8						; size = 4
_deltaz$1$ = -4						; size = 4
_window$ = 8						; size = 4
_y$ = 12						; size = 4
_Draw	PROC

; 225  : int Draw(CWindow *window, int y) {

	sub	esp, 140				; 0000008cH

; 226  :     CCanvas *canvas = window->Canvas;

	mov	eax, DWORD PTR _window$[esp+136]
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR [eax+36]

; 227  :     int x1 = window->PosX;
; 228  :     int y1 = window->PosY;

	movsx	ebx, WORD PTR [eax+18]
	movsx	ebp, WORD PTR [eax+16]
	push	edi

; 229  :     int ResX = window->Wide;

	movsx	edi, WORD PTR [eax+20]

; 230  :     int ResY = window->High;

	movsx	eax, WORD PTR [eax+22]

; 231  : 
; 232  :     int w = canvas->ScanLine;

	mov	ecx, DWORD PTR [esi+36]
	mov	DWORD PTR _ResY$1$[esp+156], eax

; 233  :     int u = 1;
; 234  :     int v = w/4;

	mov	eax, ecx
	cdq
	and	edx, 3
	mov	DWORD PTR _canvas$1$[esp+156], esi
	add	eax, edx
	mov	DWORD PTR _x1$1$[esp+156], ebp
	sar	eax, 2
	mov	DWORD PTR _v$1$[esp+156], eax

; 235  :     for (int y = y1; y < y1 + ResY; y += 2) {

	mov	eax, DWORD PTR _ResY$1$[esp+156]
	add	eax, ebx
	mov	DWORD PTR _y$1$[esp+156], ebx
	mov	DWORD PTR _ResX$1$[esp+156], edi
	mov	DWORD PTR tv950[esp+156], eax
	cmp	ebx, eax
	jge	$LN51@Draw

; 226  :     CCanvas *canvas = window->Canvas;

	movss	xmm5, DWORD PTR _dirx$3[esp+156]
	lea	edx, DWORD PTR [edi+ebp]
	movss	xmm6, DWORD PTR _diry$4[esp+156]
	mov	eax, ecx
	movss	xmm7, DWORD PTR _dirz$5[esp+156]
	imul	eax, ebx
	add	ecx, ecx
	mov	DWORD PTR tv922[esp+156], ecx
	mov	ecx, DWORD PTR tv950[esp+156]
	mov	DWORD PTR tv947[esp+156], edx
	mov	DWORD PTR tv923[esp+156], eax
$LL28@Draw:

; 236  :         //if ((y & 0xC0) == 0) AudioThread();
; 237  :         int *pixel = (int*)&canvas->Draw[y*w];

	mov	esi, DWORD PTR [esi+32]
	add	esi, eax

; 238  :         for (int x = x1; x < x1 + ResX; x += 2) {

	mov	DWORD PTR _x$1$[esp+156], ebp
	mov	DWORD PTR _pixel$1$[esp+156], esi
	cmp	ebp, edx
	jge	$LN27@Draw

; 236  :         //if ((y & 0xC0) == 0) AudioThread();
; 237  :         int *pixel = (int*)&canvas->Draw[y*w];

	mov	eax, DWORD PTR _ResY$1$[esp+156]
	mov	ecx, ebx
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	ecx, eax
	lea	eax, DWORD PTR [edi+edi*2]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	movd	xmm2, ecx
	mov	ecx, ebp
	cvtdq2ps xmm2, xmm2
	movd	xmm3, eax
	mov	eax, edi
	cdq
	sub	eax, edx
	movss	DWORD PTR tv925[esp+156], xmm2
	sar	eax, 1
	sub	ecx, eax
	mov	eax, DWORD PTR _v$1$[esp+156]
	inc	eax
	mov	DWORD PTR tv941[esp+156], ecx
	cvtdq2ps xmm3, xmm3
	add	eax, ebp
	lea	eax, DWORD PTR [esi+eax*4]
	movss	DWORD PTR tv926[esp+156], xmm3
	mov	DWORD PTR tv938[esp+156], eax
	npad	4
$LL25@Draw:

; 239  :             CRay ray;
; 240  :             ray.PosX = cam.PosX;

	movss	xmm0, DWORD PTR _cam

; 241  :             ray.PosY = cam.PosY;
; 242  :             ray.PosZ = cam.PosZ;
; 243  :             ray.DirX = xx*(x-ResX/2) + yx*(y-ResY/2) + zx*(ResX*3/4);

	movaps	xmm4, xmm2
	mulss	xmm4, DWORD PTR _yx
	movss	DWORD PTR _ray$1$[esp+156], xmm0
	movss	xmm0, DWORD PTR _cam+4
	movss	DWORD PTR _ray$2$[esp+156], xmm0
	movss	xmm0, DWORD PTR _cam+8
	movss	DWORD PTR _ray$3$[esp+156], xmm0
	movd	xmm1, ecx
	cvtdq2ps xmm1, xmm1
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR _xx
	addss	xmm4, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR _zx

; 244  :             ray.DirY = xy*(x-ResX/2) + yy*(y-ResY/2) + zy*(ResX*3/4);

	movaps	xmm3, xmm2
	mulss	xmm3, DWORD PTR _yy

; 245  :             ray.DirZ = xz*(x-ResX/2) + yz*(y-ResY/2) + zz*(ResX*3/4);

	mulss	xmm2, DWORD PTR _yz
	addss	xmm4, xmm0
	movaps	xmm0, xmm1
	mulss	xmm1, DWORD PTR _xz
	mulss	xmm0, DWORD PTR _xy
	addss	xmm2, xmm1
	addss	xmm3, xmm0
	movss	xmm0, DWORD PTR tv926[esp+156]
	mulss	xmm0, DWORD PTR _zy
	addss	xmm3, xmm0
	movss	xmm0, DWORD PTR tv926[esp+156]
	mulss	xmm0, DWORD PTR _zz
	addss	xmm2, xmm0

; 246  : 
; 247  :             float n = 1.0f / fsqrt(ray.DirX*ray.DirX + ray.DirY*ray.DirY + ray.DirZ*ray.DirZ);

	movaps	xmm1, xmm3
	movaps	xmm0, xmm4
	mulss	xmm1, xmm3
	mulss	xmm0, xmm4
	addss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm2
	addss	xmm1, xmm0
	movss	DWORD PTR _n$[esp+156], xmm1
	fld	DWORD PTR _n$[esp+156]
	fsqrt
	movss	xmm0, DWORD PTR __real@3f800000

; 248  :             ray.DirX *= n;
; 249  :             ray.DirY *= n;
; 250  :             ray.DirZ *= n;
; 251  : 
; 252  :             int mapx = (int)ray.PosX;
; 253  :             int mapy = (int)ray.PosY;
; 254  :             int mapz = (int)ray.PosZ;
; 255  :             int stepx = (ray.DirX < 0.0f) ? (-1) : (1);

	xor	ecx, ecx
	fstp	DWORD PTR $T1[esp+156]
	divss	xmm0, DWORD PTR $T1[esp+156]
	cvttss2si esi, DWORD PTR _ray$1$[esp+156]
	movaps	xmm1, xmm0
	mulss	xmm1, xmm4
	movaps	xmm4, xmm0
	mulss	xmm0, xmm2
	xorps	xmm2, xmm2
	comiss	xmm2, xmm1
	mulss	xmm4, xmm3
	setbe	cl
	movss	DWORD PTR _ray$5$[esp+156], xmm1

; 256  :             int stepy = (ray.DirY < 0.0f) ? (-1) : (1);

	xor	edx, edx
	movss	DWORD PTR _ray$9$[esp+156], xmm0
	comiss	xmm2, xmm4
	lea	ecx, DWORD PTR [ecx*2-1]
	mov	DWORD PTR _stepx$1$[esp+156], ecx
	cvttss2si edi, DWORD PTR _ray$2$[esp+156]
	setbe	dl

; 257  :             int stepz = (ray.DirZ < 0.0f) ? (-1) : (1);

	xor	eax, eax
	lea	edx, DWORD PTR [edx*2-1]
	mov	DWORD PTR _stepy$1$[esp+156], edx
	movd	xmm3, ecx
	comiss	xmm2, xmm0

; 258  : 
; 259  :             float sidex = (mapx - ray.PosX + 0.5f + 0.5f*stepx) / ray.DirX;

	movss	xmm2, DWORD PTR __real@3f800000
	divss	xmm2, xmm1
	setbe	al
	lea	eax, DWORD PTR [eax*2-1]
	mov	DWORD PTR _stepz$1$[esp+156], eax
	cvttss2si ebx, DWORD PTR _ray$3$[esp+156]
	movd	xmm1, esi
	cvtdq2ps xmm1, xmm1
	cvtdq2ps xmm3, xmm3
	subss	xmm1, DWORD PTR _ray$1$[esp+156]
	movss	DWORD PTR _ray$7$[esp+156], xmm4
	movaps	xmm0, xmm3
	movss	xmm4, DWORD PTR __real@3f000000
	movss	DWORD PTR tv929[esp+156], xmm2
	addss	xmm1, xmm4
	mulss	xmm0, xmm4
	addss	xmm1, xmm0

; 260  :             float sidey = (mapy - ray.PosY + 0.5f + 0.5f*stepy) / ray.DirY;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _ray$7$[esp+156]
	mulss	xmm1, xmm2
	movss	DWORD PTR tv931[esp+156], xmm0
	movd	xmm2, edx
	movss	DWORD PTR _sidex$1$[esp+156], xmm1
	movd	xmm1, edi
	cvtdq2ps xmm1, xmm1
	cvtdq2ps xmm2, xmm2
	subss	xmm1, DWORD PTR _ray$2$[esp+156]
	movaps	xmm0, xmm2
	mulss	xmm0, xmm4
	addss	xmm1, xmm4
	movd	xmm4, ebx

; 261  :             float sidez = (mapz - ray.PosZ + 0.5f + 0.5f*stepz) / ray.DirZ;

	cvtdq2ps xmm4, xmm4
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _ray$9$[esp+156]
	mulss	xmm1, DWORD PTR tv931[esp+156]
	subss	xmm4, DWORD PTR _ray$3$[esp+156]
	movss	DWORD PTR tv933[esp+156], xmm0
	movss	DWORD PTR _sidey$1$[esp+156], xmm1
	movd	xmm1, eax
	cvtdq2ps xmm1, xmm1
	addss	xmm4, DWORD PTR __real@3f000000
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm4, xmm0

; 262  :             float deltax = stepx / ray.DirX;

	movss	xmm0, DWORD PTR tv929[esp+156]
	mulss	xmm0, xmm3

; 263  :             float deltay = stepy / ray.DirY;

	movss	xmm3, DWORD PTR tv931[esp+156]
	mulss	xmm3, xmm2

; 264  :             float deltaz = stepz / ray.DirZ;
; 265  : 
; 266  :             int side = 3;
; 267  :             if ((sidex < sidey) && (sidex < sidez)) side = 1;

	movss	xmm2, DWORD PTR _sidey$1$[esp+156]
	mulss	xmm4, DWORD PTR tv933[esp+156]
	movss	DWORD PTR _deltax$1$[esp+156], xmm0
	movss	xmm0, DWORD PTR tv933[esp+156]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _sidex$1$[esp+156]
	comiss	xmm2, xmm1
	movss	DWORD PTR _deltaz$1$[esp+156], xmm0
	jbe	SHORT $LN22@Draw
	comiss	xmm4, xmm1
	jbe	SHORT $LN22@Draw
	mov	ecx, 1
	jmp	SHORT $LN20@Draw
$LN22@Draw:

; 268  :             else if (sidey < sidez)                 side = 2;

	xor	ecx, ecx
	comiss	xmm4, xmm2
	setbe	cl
	add	ecx, 2
$LN20@Draw:

; 274  :             for (;;) {
; 275  :                 i = i % (voxelx*voxely*voxelz);

	mov	eax, DWORD PTR _voxelz
	imul	eax, DWORD PTR _voxely
	mov	ebp, DWORD PTR _voxely
	imul	ebp, ebx
	imul	eax, DWORD PTR _voxelx
	mov	DWORD PTR tv945[esp+156], eax
	lea	eax, DWORD PTR [edi+ebp]
	imul	eax, DWORD PTR _voxelx
	add	eax, esi
	cdq
	idiv	DWORD PTR tv945[esp+156]
	mov	eax, edx

; 276  :                 if (voxel[i]) break;

	mov	edx, DWORD PTR _voxel
	mov	DWORD PTR _i$1$[esp+156], eax
	cmp	DWORD PTR [edx+eax*4], 0
	jne	$LN38@Draw

; 269  :             else                                    side = 3;
; 270  : 
; 271  :             //bool done = false;
; 272  :             //while (!voxel[mapx + mapy*voxelx + mapz*voxelx*voxely]) {
; 273  :             int i = mapx + mapy*voxelx + mapz*voxelx*voxely;

	mov	edx, DWORD PTR _stepz$1$[esp+156]
	mov	ecx, edx
	mov	eax, DWORD PTR _voxely
	movss	xmm5, DWORD PTR _deltax$1$[esp+156]
	movss	xmm6, DWORD PTR _deltaz$1$[esp+156]
	imul	ecx, eax
	mov	DWORD PTR tv942[esp+156], ecx
	jmp	SHORT $LN18@Draw
	npad	3
$LL53@Draw:
	mov	ecx, DWORD PTR tv942[esp+156]
$LN18@Draw:

; 277  :                 if ((sidex < sidey) && (sidex < sidez)) {

	comiss	xmm2, xmm1
	jbe	SHORT $LN15@Draw
	comiss	xmm4, xmm1
	jbe	SHORT $LN15@Draw

; 278  :                     mapx  += stepx;

	add	esi, DWORD PTR _stepx$1$[esp+156]

; 279  :                     sidex += deltax;

	movaps	xmm0, xmm5
	addss	xmm1, xmm0

; 280  :                     side  = 1;

	mov	ecx, 1

; 281  :                     if (mapx < 0 || mapx >= voxelx) break;

	js	SHORT $LN52@Draw
	cmp	esi, DWORD PTR _voxelx

; 282  :                 } else if (sidey < sidez) {

	jmp	SHORT $LN54@Draw
$LN15@Draw:
	comiss	xmm4, xmm2
	jbe	SHORT $LN11@Draw

; 283  :                     mapy  += stepy;

	add	edi, DWORD PTR _stepy$1$[esp+156]

; 284  :                     sidey += deltay;

	movaps	xmm0, xmm3
	addss	xmm2, xmm0

; 285  :                     side  = 2;

	mov	ecx, 2

; 286  :                     if (mapy < 0 || mapy >= voxely) break;

	js	SHORT $LN52@Draw
	cmp	edi, eax

; 287  :                 } else {

	jmp	SHORT $LN54@Draw
$LN11@Draw:

; 288  :                     mapz  += stepz;

	add	ebp, ecx

; 289  :                     sidez += deltaz;

	movaps	xmm0, xmm6
	add	ebx, edx
	addss	xmm4, xmm0

; 290  :                     side  = 3;

	mov	ecx, 3

; 291  :                     if (mapz < 0 || mapz >= voxelz) break;

	js	SHORT $LN52@Draw
	cmp	ebx, DWORD PTR _voxelz
$LN54@Draw:
	jge	SHORT $LN52@Draw

; 292  :                 }
; 293  :                 i = mapx + mapy*voxelx + mapz*voxelx*voxely;

	lea	eax, DWORD PTR [edi+ebp]
	imul	eax, DWORD PTR _voxelx
	add	eax, esi
	cdq
	idiv	DWORD PTR tv945[esp+156]
	mov	eax, edx
	mov	edx, DWORD PTR _voxel
	mov	DWORD PTR _i$1$[esp+156], eax
	cmp	DWORD PTR [edx+eax*4], 0
	mov	eax, DWORD PTR _voxely
	mov	edx, DWORD PTR _stepz$1$[esp+156]
	je	$LL53@Draw
$LN52@Draw:
	movss	xmm5, DWORD PTR _dirx$3[esp+156]
	movss	xmm6, DWORD PTR _diry$4[esp+156]
$LN38@Draw:

; 294  :             }
; 295  : 
; 296  :             float posx, posy, posz;
; 297  :             float dirx, diry, dirz;
; 298  :             switch (side) {

	dec	ecx
	je	$LN3@Draw
	dec	ecx
	je	SHORT $LN2@Draw
	dec	ecx
	jne	$LN4@Draw

; 309  :             case 3:
; 310  :               dirx = (mapz + (1-stepz)/2.0f - ray.PosZ) * ray.DirX/ray.DirZ;

	mov	eax, 1
	movd	xmm0, ebx
	sub	eax, DWORD PTR _stepz$1$[esp+156]
	cvtdq2ps xmm0, xmm0
	movd	xmm7, eax
	cvtdq2ps xmm7, xmm7
	mulss	xmm7, DWORD PTR __real@3f000000
	addss	xmm7, xmm0
	subss	xmm7, DWORD PTR _ray$3$[esp+156]
	movaps	xmm5, xmm7

; 311  :               diry = (mapz + (1-stepz)/2.0f - ray.PosZ) * ray.DirY/ray.DirZ;

	movaps	xmm6, xmm7
	mulss	xmm5, DWORD PTR _ray$5$[esp+156]
	mulss	xmm6, DWORD PTR _ray$7$[esp+156]
	mulss	xmm5, DWORD PTR tv933[esp+156]
	mulss	xmm6, DWORD PTR tv933[esp+156]

; 312  :               dirz = (mapz + (1-stepz)/2.0f - ray.PosZ);
; 313  :               break;

	jmp	$LN55@Draw
$LN2@Draw:

; 303  :               break;
; 304  :             case 2:
; 305  :               dirx = (mapy + (1-stepy)/2.0f - ray.PosY) * ray.DirX/ray.DirY;

	mov	eax, 1
	movd	xmm0, edi
	sub	eax, DWORD PTR _stepy$1$[esp+156]
	cvtdq2ps xmm0, xmm0
	movd	xmm6, eax
	cvtdq2ps xmm6, xmm6
	mulss	xmm6, DWORD PTR __real@3f000000
	addss	xmm6, xmm0
	subss	xmm6, DWORD PTR _ray$2$[esp+156]
	movaps	xmm5, xmm6

; 306  :               diry = (mapy + (1-stepy)/2.0f - ray.PosY);
; 307  :               dirz = (mapy + (1-stepy)/2.0f - ray.PosY) * ray.DirZ/ray.DirY;

	movaps	xmm7, xmm6
	mulss	xmm5, DWORD PTR _ray$5$[esp+156]
	mulss	xmm7, DWORD PTR _ray$9$[esp+156]
	mulss	xmm5, DWORD PTR tv931[esp+156]
	mulss	xmm7, DWORD PTR tv931[esp+156]

; 308  :               break;

	jmp	SHORT $LN55@Draw
$LN3@Draw:

; 299  :             case 1:
; 300  :               dirx = (mapx + (1-stepx)/2.0f - ray.PosX);

	mov	eax, 1
	movd	xmm0, esi
	sub	eax, DWORD PTR _stepx$1$[esp+156]
	cvtdq2ps xmm0, xmm0
	movd	xmm5, eax
	cvtdq2ps xmm5, xmm5
	mulss	xmm5, DWORD PTR __real@3f000000
	addss	xmm5, xmm0
	subss	xmm5, DWORD PTR _ray$1$[esp+156]

; 301  :               diry = (mapx + (1-stepx)/2.0f - ray.PosX) * ray.DirY/ray.DirX;

	movaps	xmm6, xmm5

; 302  :               dirz = (mapx + (1-stepx)/2.0f - ray.PosX) * ray.DirZ/ray.DirX;

	movaps	xmm7, xmm5
	mulss	xmm6, DWORD PTR _ray$7$[esp+156]
	mulss	xmm7, DWORD PTR _ray$9$[esp+156]
	mulss	xmm6, DWORD PTR tv929[esp+156]
	mulss	xmm7, DWORD PTR tv929[esp+156]
$LN55@Draw:

; 301  :               diry = (mapx + (1-stepx)/2.0f - ray.PosX) * ray.DirY/ray.DirX;

	movss	DWORD PTR _dirx$3[esp+156], xmm5
	movss	DWORD PTR _diry$4[esp+156], xmm6
$LN4@Draw:

; 314  :             }
; 315  : 
; 316  :             posx = ray.PosX + dirx;
; 317  :             posy = ray.PosY + diry;
; 318  :             posz = ray.PosZ + dirz;
; 319  : 
; 320  :             u8 *vxl = (u8*)&voxel[i];
; 321  :             u8 tx = (u8)(256*posx);

	movss	xmm2, DWORD PTR __real@43800000
	movaps	xmm0, xmm5
	addss	xmm0, DWORD PTR _ray$1$[esp+156]

; 322  :             u8 ty = (u8)(256*posy);
; 323  :             u8 tz = (u8)(256*posz);
; 324  : 
; 325  :             u8 b = tz ^ tx ^ vxl[0];

	mov	esi, DWORD PTR _i$1$[esp+156]

; 326  :             u8 g = ty ^ tz ^ vxl[1];
; 327  :             u8 r = tx ^ ty ^ vxl[2];
; 328  : 
; 329  :             float d = 0.5f/fsqrt(dirx*dirx + diry*diry + dirz*dirz);

	movaps	xmm1, xmm6
	mov	edi, DWORD PTR _voxel
	mulss	xmm1, xmm6
	mulss	xmm0, xmm2
	mov	bh, BYTE PTR [edi+esi*4]
	mov	bl, BYTE PTR [edi+esi*4+1]
	cvttss2si edx, xmm0
	movaps	xmm0, xmm6
	addss	xmm0, DWORD PTR _ray$2$[esp+156]
	mulss	xmm0, xmm2
	cvttss2si ecx, xmm0
	movaps	xmm0, xmm7
	addss	xmm0, DWORD PTR _ray$3$[esp+156]
	mulss	xmm0, xmm2
	cvttss2si eax, xmm0
	movaps	xmm0, xmm5
	mulss	xmm0, xmm5
	xor	bh, al
	xor	bl, al
	xor	bh, dl
	mov	al, BYTE PTR [edi+esi*4+2]
	xor	bl, cl
	xor	al, cl
	addss	xmm1, xmm0
	xor	al, dl
	movaps	xmm0, xmm7
	mulss	xmm0, xmm7
	addss	xmm1, xmm0
	movss	DWORD PTR _n$[esp+156], xmm1
	fld	DWORD PTR _n$[esp+156]
	fsqrt
	movss	xmm1, DWORD PTR __real@3f000000
	fstp	DWORD PTR $T2[esp+156]
	divss	xmm1, DWORD PTR $T2[esp+156]

; 330  :             r = (u8)(r*0.5f + r*d);
; 331  :             g = (u8)(g*0.5f + g*d);
; 332  :             b = (u8)(b*0.5f + b*d);
; 333  : 
; 334  :             u32 rgb = (r<<16) | (g<<8) | (b);
; 335  :             u32 c = rgb;

	movzx	eax, al

; 336  :             pixel[x    ] = c;

	mov	ebp, DWORD PTR _x$1$[esp+156]
	mov	edx, DWORD PTR tv947[esp+156]
	movd	xmm0, eax
	addss	xmm1, DWORD PTR __real@3f000000
	cvtdq2ps xmm0, xmm0
	movss	xmm2, DWORD PTR tv925[esp+156]
	mulss	xmm0, xmm1
	movss	xmm3, DWORD PTR tv926[esp+156]
	cvttss2si eax, xmm0
	movzx	ecx, al
	movzx	eax, bl
	shl	ecx, 8
	movd	xmm0, eax
	cvtdq2ps xmm0, xmm0
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	movzx	eax, al
	or	ecx, eax
	movzx	eax, bh
	shl	ecx, 8
	movd	xmm0, eax
	cvtdq2ps xmm0, xmm0
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	movzx	eax, al
	or	ecx, eax
	mov	eax, DWORD PTR _pixel$1$[esp+156]
	mov	DWORD PTR [eax+ebp*4], ecx

; 337  :             pixel[x+u  ] = c;

	mov	DWORD PTR [eax+ebp*4+4], ecx
	add	ebp, 2

; 338  :             pixel[x  +v] = c;

	mov	eax, DWORD PTR tv938[esp+156]
	mov	DWORD PTR _x$1$[esp+156], ebp
	mov	DWORD PTR [eax-4], ecx

; 339  :             pixel[x+u+v] = c;

	mov	DWORD PTR [eax], ecx
	add	eax, 8
	mov	ecx, DWORD PTR tv941[esp+156]
	add	ecx, 2
	mov	DWORD PTR tv938[esp+156], eax
	mov	DWORD PTR tv941[esp+156], ecx
	cmp	ebp, edx
	jl	$LL25@Draw
	mov	ebx, DWORD PTR _y$1$[esp+156]
	mov	ebp, DWORD PTR _x1$1$[esp+156]
	mov	eax, DWORD PTR tv923[esp+156]
	mov	edi, DWORD PTR _ResX$1$[esp+156]
	mov	ecx, DWORD PTR tv950[esp+156]
$LN27@Draw:

; 235  :     for (int y = y1; y < y1 + ResY; y += 2) {

	add	eax, DWORD PTR tv922[esp+156]
	add	ebx, 2
	mov	esi, DWORD PTR _canvas$1$[esp+156]
	mov	DWORD PTR _y$1$[esp+156], ebx
	mov	DWORD PTR tv923[esp+156], eax
	cmp	ebx, ecx
	jl	$LL28@Draw
$LN51@Draw:

; 340  :         }
; 341  :     }
; 342  :     return y;

	mov	eax, DWORD PTR _y$[esp+152]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 343  : }

	add	esp, 140				; 0000008cH
	ret	0
_Draw	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-211\source\applications\fps\engine.c
_TEXT	SEGMENT
_Physics PROC

; 215  :     bot[0].PosX = MIN(MAX(1.0f, bot[0].PosX + bot[0].DirX), voxelx - 1.0f);

	movss	xmm1, DWORD PTR _bot+12
	addss	xmm1, DWORD PTR _bot
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, xmm1
	jbe	SHORT $LN3@Physics
	movaps	xmm3, xmm0
	jmp	SHORT $LN4@Physics
$LN3@Physics:
	movaps	xmm3, xmm1
$LN4@Physics:
	movd	xmm2, DWORD PTR _voxelx
	cvtdq2ps xmm2, xmm2
	subss	xmm2, xmm0
	comiss	xmm2, xmm3
	jbe	SHORT $LN7@Physics
	comiss	xmm0, xmm1
	jbe	SHORT $LN8@Physics
	movaps	xmm1, xmm0
	jmp	SHORT $LN8@Physics
$LN7@Physics:
	movaps	xmm1, xmm2
$LN8@Physics:

; 216  :     bot[0].PosY = MIN(MAX(1.0f, bot[0].PosY + bot[0].DirY), voxely - 1.0f);

	movss	xmm2, DWORD PTR _bot+16
	addss	xmm2, DWORD PTR _bot+4
	movss	DWORD PTR _bot, xmm1
	comiss	xmm0, xmm2
	jbe	SHORT $LN9@Physics
	movaps	xmm4, xmm0
	jmp	SHORT $LN10@Physics
$LN9@Physics:
	movaps	xmm4, xmm2
$LN10@Physics:
	movd	xmm3, DWORD PTR _voxely
	cvtdq2ps xmm3, xmm3
	subss	xmm3, xmm0
	comiss	xmm3, xmm4
	jbe	SHORT $LN13@Physics
	comiss	xmm0, xmm2
	jbe	SHORT $LN14@Physics
	movaps	xmm2, xmm0
	jmp	SHORT $LN14@Physics
$LN13@Physics:
	movaps	xmm2, xmm3
$LN14@Physics:

; 217  :     bot[0].PosZ = MIN(MAX(1.0f, bot[0].PosZ + bot[0].DirZ), voxelz - 1.0f);

	movss	xmm3, DWORD PTR _bot+20
	addss	xmm3, DWORD PTR _bot+8
	movss	DWORD PTR _bot+4, xmm2
	comiss	xmm0, xmm3
	jbe	SHORT $LN15@Physics
	movaps	xmm5, xmm0
	jmp	SHORT $LN16@Physics
$LN15@Physics:
	movaps	xmm5, xmm3
$LN16@Physics:
	movd	xmm4, DWORD PTR _voxelz
	cvtdq2ps xmm4, xmm4
	subss	xmm4, xmm0
	comiss	xmm4, xmm5
	jbe	SHORT $LN19@Physics
	comiss	xmm0, xmm3
	ja	SHORT $LN20@Physics
	movaps	xmm0, xmm3
	jmp	SHORT $LN20@Physics
$LN19@Physics:
	movaps	xmm0, xmm4
$LN20@Physics:
	movss	DWORD PTR _bot+8, xmm0

; 218  : 
; 219  :     cam.PosX = bot[0].PosX;
; 220  :     cam.PosY = bot[0].PosY;
; 221  :     cam.PosZ = bot[0].PosZ;
; 222  :     return 0;

	xor	eax, eax
	movss	DWORD PTR _cam, xmm1
	movss	DWORD PTR _cam+4, xmm2
	movss	DWORD PTR _cam+8, xmm0

; 223  : }

	ret	0
_Physics ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-211\source\applications\fps\engine.c
_TEXT	SEGMENT
_xx$1$ = -24						; size = 4
_yx$1$ = -20						; size = 4
_cx$ = -20						; size = 4
_sx$ = -16						; size = 4
_xz$1$ = -12						; size = 4
_sy$ = -12						; size = 4
_xy$1$ = -8						; size = 4
_cz$ = -8						; size = 4
_zx$1$ = -4						; size = 4
_n$ = -4						; size = 4
_n$ = -4						; size = 4
_n$ = -4						; size = 4
_sz$ = -4						; size = 4
_zz$1$ = 8						; size = 4
_n$ = 8							; size = 4
_n$ = 8							; size = 4
_n$ = 8							; size = 4
_cy$ = 8						; size = 4
_keybrd$ = 8						; size = 4
_Control PROC

; 171  :     bot[0].DirX = 0.0f;
; 172  :     bot[0].DirY = 0.0f;
; 173  :     bot[0].DirZ = 0.0f;
; 174  : 
; 175  :     //               ULDR || WASD
; 176  :     if (keybrd[KEY_UP   ] || keybrd[0x11]) bot[0].DirZ += 0.125f;

	mov	eax, DWORD PTR _keybrd$[esp-4]
	xorps	xmm0, xmm0
	movss	xmm3, DWORD PTR __real@3e000000
	movaps	xmm1, xmm0
	movaps	xmm2, xmm0
	movss	DWORD PTR _bot+12, xmm0
	sub	esp, 24					; 00000018H
	movss	DWORD PTR _bot+16, xmm1
	movss	DWORD PTR _bot+20, xmm2
	cmp	BYTE PTR [eax+92], 0
	jne	SHORT $LN13@Control
	cmp	BYTE PTR [eax+17], 0
	je	SHORT $LN14@Control
$LN13@Control:
	movaps	xmm2, xmm3
	movss	DWORD PTR _bot+20, xmm2
$LN14@Control:

; 177  :     if (keybrd[KEY_DOWN ] || keybrd[0x1F]) bot[0].DirZ -= 0.125f;

	cmp	BYTE PTR [eax+93], 0
	jne	SHORT $LN11@Control
	cmp	BYTE PTR [eax+31], 0
	je	SHORT $LN12@Control
$LN11@Control:
	subss	xmm2, xmm3
	movss	DWORD PTR _bot+20, xmm2
$LN12@Control:

; 178  :     if (keybrd[KEY_LEFT ] || keybrd[0x1A]) bot[0].DirX -= 0.125f;

	cmp	BYTE PTR [eax+94], 0
	jne	SHORT $LN9@Control
	cmp	BYTE PTR [eax+26], 0
	je	SHORT $LN10@Control
$LN9@Control:
	movss	xmm0, DWORD PTR __real@be000000
	movss	DWORD PTR _bot+12, xmm0
$LN10@Control:

; 179  :     if (keybrd[KEY_RIGHT] || keybrd[0x20]) bot[0].DirX += 0.125f;

	cmp	BYTE PTR [eax+95], 0
	jne	SHORT $LN7@Control
	cmp	BYTE PTR [eax+32], 0
	je	SHORT $LN8@Control
$LN7@Control:
	addss	xmm0, xmm3
	movss	DWORD PTR _bot+12, xmm0
$LN8@Control:

; 180  :     if (keybrd[KEY_NUM1 ]) bot[0].DirY -= 0.125f/4;

	cmp	BYTE PTR [eax+97], 0
	je	SHORT $LN6@Control
	movss	xmm1, DWORD PTR __real@bd000000
	movss	DWORD PTR _bot+16, xmm1
$LN6@Control:

; 181  :     if (keybrd[KEY_NUM0 ]) bot[0].DirY += 0.125f/4;

	cmp	BYTE PTR [eax+96], 0
	movss	xmm2, DWORD PTR __real@3d000000
	je	SHORT $LN5@Control
	addss	xmm1, xmm2
	movss	DWORD PTR _bot+16, xmm1
$LN5@Control:

; 182  :     if (keybrd[KEY_NUM8 ]) bot[0].RotX += 0.125f/4;

	cmp	BYTE PTR [eax+104], 0
	movss	xmm0, DWORD PTR _bot+24
	je	SHORT $LN4@Control
	addss	xmm0, xmm2
	movss	DWORD PTR _bot+24, xmm0
$LN4@Control:

; 183  :     if (keybrd[KEY_NUM2 ]) bot[0].RotX -= 0.125f/4;

	cmp	BYTE PTR [eax+98], 0
	je	SHORT $LN3@Control
	subss	xmm0, xmm2
	movss	DWORD PTR _bot+24, xmm0
$LN3@Control:

; 184  :     if (keybrd[KEY_NUM4 ]) bot[0].RotY -= 0.125f/4;

	cmp	BYTE PTR [eax+100], 0
	movss	xmm1, DWORD PTR _bot+28
	je	SHORT $LN2@Control
	subss	xmm1, xmm2
	movss	DWORD PTR _bot+28, xmm1
$LN2@Control:

; 185  :     if (keybrd[KEY_NUM6 ]) bot[0].RotY += 0.125f/4;

	cmp	BYTE PTR [eax+102], 0
	je	SHORT $LN1@Control
	addss	xmm1, xmm2
	movss	DWORD PTR _bot+28, xmm1
$LN1@Control:

; 186  :     bot[0].RotX = MIN(MAX(bot[0].RotX, -pi/2), pi/2);

	movss	xmm1, DWORD PTR __real@bfc90fdb
	comiss	xmm0, xmm1
	jbe	SHORT $LN19@Control
	movss	xmm1, DWORD PTR __real@3fc90fdb
	comiss	xmm1, xmm0
	ja	SHORT $LN22@Control
$LN19@Control:
	movaps	xmm0, xmm1
$LN22@Control:
	movss	DWORD PTR _bot+24, xmm0

; 187  : 
; 188  :     float cx = fcos(bot[0].RotX);

	movss	DWORD PTR _n$[esp+20], xmm0
	fld	DWORD PTR _n$[esp+20]
	fcos

; 189  :     float sx = fsin(bot[0].RotX);

	movss	xmm0, DWORD PTR _bot+24
	fstp	DWORD PTR _cx$[esp+24]
	movss	DWORD PTR _n$[esp+20], xmm0
	fld	DWORD PTR _n$[esp+20]
	fsin

; 190  :     float cy = fcos(bot[0].RotY);

	movss	xmm0, DWORD PTR _bot+28
	fstp	DWORD PTR _sx$[esp+24]
	movss	DWORD PTR _n$[esp+20], xmm0
	fld	DWORD PTR _n$[esp+20]
	fcos

; 191  :     float sy = fsin(bot[0].RotY);

	movss	xmm0, DWORD PTR _bot+28
	fstp	DWORD PTR _cy$[esp+20]
	movss	DWORD PTR _n$[esp+24], xmm0
	fld	DWORD PTR _n$[esp+24]
	fsin

; 192  :     float cz = fcos(bot[0].RotZ);

	movss	xmm0, DWORD PTR _bot+32
	fstp	DWORD PTR _sy$[esp+24]
	movss	DWORD PTR _n$[esp+24], xmm0
	fld	DWORD PTR _n$[esp+24]
	fcos

; 193  :     float sz = fsin(bot[0].RotZ);

	movss	xmm0, DWORD PTR _bot+32
	fstp	DWORD PTR _cz$[esp+24]
	movss	DWORD PTR _n$[esp+24], xmm0
	fld	DWORD PTR _n$[esp+24]
	fsin

; 194  : 
; 195  :     xx = cz*cy;

	movss	xmm5, DWORD PTR _cz$[esp+24]

; 196  :     xy = sz*cy;
; 197  :     xz = -sy;

	movss	xmm1, DWORD PTR _sy$[esp+24]
	movaps	xmm0, xmm5
	mulss	xmm0, DWORD PTR _cy$[esp+20]

; 198  :     yx = cz*sy*sx - sz*cx;

	movss	xmm3, DWORD PTR _cx$[esp+24]
	movss	xmm2, DWORD PTR _sx$[esp+24]
	movss	DWORD PTR _xx$1$[esp+24], xmm0
	movss	DWORD PTR _xx, xmm0
	fstp	DWORD PTR _sz$[esp+24]
	movss	xmm4, DWORD PTR _sz$[esp+24]
	movaps	xmm0, xmm4

; 199  :     yy = sz*sy*sx + cz*cx;

	movaps	xmm7, xmm4
	mulss	xmm0, DWORD PTR _cy$[esp+20]
	mulss	xmm7, xmm1
	movss	DWORD PTR _xy$1$[esp+24], xmm0
	movss	DWORD PTR _xy, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _xz$1$[esp+24], xmm0
	movss	DWORD PTR _xz, xmm0
	movaps	xmm0, xmm5
	mulss	xmm0, xmm1
	movaps	xmm1, xmm7
	mulss	xmm1, xmm2
	movaps	xmm6, xmm0
	movss	DWORD PTR _zx$1$[esp+24], xmm0
	movaps	xmm0, xmm4
	mulss	xmm6, xmm2
	mulss	xmm0, xmm3

; 200  :     yz = cy*sx;
; 201  :     zx = cz*sy*cx + sz*sx;

	mulss	xmm4, xmm2
	subss	xmm6, xmm0

; 202  :     zy = sz*sy*cx - cz*sx;

	mulss	xmm7, xmm3
	movaps	xmm0, xmm5
	mulss	xmm5, xmm2
	mulss	xmm0, xmm3
	movss	DWORD PTR _yx$1$[esp+24], xmm6
	subss	xmm7, xmm5
	movss	DWORD PTR _yx, xmm6
	movss	xmm6, DWORD PTR _cy$[esp+20]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR _zx$1$[esp+24]
	mulss	xmm0, xmm3
	mulss	xmm6, xmm2
	addss	xmm0, xmm4
	movss	DWORD PTR _yy, xmm1

; 203  :     zz = cy*cx;
; 204  : 
; 205  :     float dx = xx*bot[0].DirX + yx*bot[0].DirY + zx*bot[0].DirZ;
; 206  :     float dy = xy*bot[0].DirX + yy*bot[0].DirY + zy*bot[0].DirZ;

	movss	xmm4, DWORD PTR _bot+16
	movaps	xmm5, xmm4
	movss	DWORD PTR _yz, xmm6
	movss	DWORD PTR _zy, xmm7
	mulss	xmm5, xmm1
	movss	DWORD PTR _zx$1$[esp+24], xmm0
	movss	DWORD PTR _zx, xmm0
	movss	xmm0, DWORD PTR _cy$[esp+20]
	mulss	xmm0, xmm3
	movss	xmm3, DWORD PTR _bot+12
	movss	DWORD PTR _zz$1$[esp+20], xmm0
	movss	DWORD PTR _zz, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR _xy$1$[esp+24]

; 207  :     float dz = xz*bot[0].DirX + yz*bot[0].DirY + zz*bot[0].DirZ;

	movaps	xmm2, xmm4

; 208  :     bot[0].DirX = dx;
; 209  :     bot[0].DirY = dy;
; 210  :     bot[0].DirZ = dz;
; 211  :     return 0;

	xor	eax, eax
	movss	xmm1, DWORD PTR _bot+20
	mulss	xmm4, DWORD PTR _yx$1$[esp+24]
	addss	xmm5, xmm0
	mulss	xmm2, xmm6
	movaps	xmm0, xmm1
	mulss	xmm0, xmm7
	addss	xmm5, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR _xz$1$[esp+24]
	mulss	xmm3, DWORD PTR _xx$1$[esp+24]
	addss	xmm2, xmm0
	movss	DWORD PTR _bot+16, xmm5
	movaps	xmm0, xmm1
	mulss	xmm1, DWORD PTR _zx$1$[esp+24]
	mulss	xmm0, DWORD PTR _zz$1$[esp+20]
	addss	xmm4, xmm3
	addss	xmm2, xmm0
	addss	xmm4, xmm1
	movss	DWORD PTR _bot+20, xmm2
	movss	DWORD PTR _bot+12, xmm4

; 212  : }

	add	esp, 24					; 00000018H
	ret	0
_Control ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-211\source\applications\fps\engine.c
_TEXT	SEGMENT
_y$1$ = -16						; size = 4
_z$1$ = -16						; size = 4
_res$1 = -12						; size = 4
_res$2 = -8						; size = 4
_res$3 = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_z$1$ = 16						; size = 4
_res$4 = 16						; size = 4
_w$ = 16						; size = 4
_Reset	PROC

; 111  :     //fldc();
; 112  :     char *m1 = (char*)&u;
; 113  :     char *m2 = (char*)&v;
; 114  :     char *m3 = (char*)&w;
; 115  :     m3[0] ^= m1[0]*m2[0] + m1[1]*m2[2];

	mov	edx, DWORD PTR _u$[esp-4]
	sub	esp, 16					; 00000010H
	mov	al, dl

; 116  :     m3[1] ^= m1[0]*m2[1] + m1[1]*m2[3];
; 117  :     m3[2] ^= m1[2]*m2[0] + m1[3]*m2[2];
; 118  :     m3[3] ^= m1[2]*m2[1] + m1[3]*m2[3];
; 119  :     int seed = w;
; 120  : 
; 121  :     //fldc();
; 122  :     xx = 1.0f; xy = 0.0f; xz = 0.0f;

	mov	DWORD PTR _xx, 1065353216		; 3f800000H
	mov	DWORD PTR _xy, 0
	mov	DWORD PTR _xz, 0
	push	ebx
	mov	ebx, DWORD PTR _v$[esp+16]
	imul	bl

; 123  :     yx = 0.0f; yy = 1.0f; yz = 0.0f;

	mov	DWORD PTR _yx, 0
	mov	cl, al
	mov	DWORD PTR _yy, 1065353216		; 3f800000H
	mov	al, dh
	mov	DWORD PTR _yz, 0
	imul	BYTE PTR _v$[esp+18]

; 124  :     zx = 0.0f; zy = 0.0f; zz = 1.0f;

	mov	DWORD PTR _zx, 0
	add	cl, al
	mov	DWORD PTR _zy, 0
	xor	BYTE PTR _w$[esp+16], cl
	mov	al, bh
	imul	dl
	mov	DWORD PTR _zz, 1065353216		; 3f800000H
	mov	cl, al

; 125  : 
; 126  :     voxelx = 64;

	mov	DWORD PTR _voxelx, 64			; 00000040H
	mov	al, BYTE PTR _v$[esp+19]
	imul	dh

; 127  :     voxely =  8;

	mov	DWORD PTR _voxely, 8
	add	cl, al

; 128  :     voxelz = 64;

	mov	DWORD PTR _voxelz, 64			; 00000040H
	mov	al, BYTE PTR _u$[esp+18]
	xor	BYTE PTR _w$[esp+17], cl
	imul	bl

; 129  :     voxel = Memory->Alloc(4*voxelx*voxely*voxelz);

	push	131072					; 00020000H
	mov	cl, al
	mov	al, BYTE PTR _u$[esp+23]
	imul	BYTE PTR _v$[esp+22]
	add	cl, al
	mov	al, BYTE PTR _u$[esp+22]
	imul	BYTE PTR _v$[esp+21]
	xor	BYTE PTR _w$[esp+22], cl
	mov	cl, al
	mov	al, BYTE PTR _u$[esp+23]
	imul	BYTE PTR _v$[esp+23]
	add	cl, al
	mov	eax, DWORD PTR __imp__Memory
	xor	BYTE PTR _w$[esp+23], cl
	mov	ebx, DWORD PTR _w$[esp+20]
	mov	eax, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax]
	call	eax
	add	esp, 4
	mov	DWORD PTR _voxel, eax

; 130  :     if (!voxel) return false;

	test	eax, eax
	jne	SHORT $LN41@Reset
	pop	ebx

; 168  : }

	add	esp, 16					; 00000010H
	ret	0
$LN41@Reset:

; 131  : 
; 132  :     Logger("voxels %X (%dx%dx%d)\n", voxel, voxelx, voxely, voxelz);
; 133  : 	for (int z = 0; z < voxelz; z++)

	mov	eax, DWORD PTR _voxelz
	mov	edx, DWORD PTR _voxelx
	mov	ecx, DWORD PTR _voxely
	push	ebp
	push	esi
	xor	ebp, ebp
	push	edi
	test	eax, eax
	jle	SHORT $LN36@Reset
$LL38@Reset:

; 134  :     for (int y = 0; y < voxely; y++)

	xor	edi, edi
	test	ecx, ecx
	jle	SHORT $LN37@Reset
	npad	5
$LL35@Reset:

; 135  :     for (int x = 0; x < voxelx; x++)

	xor	esi, esi
	test	edx, edx
	jle	SHORT $LN34@Reset
$LL32@Reset:

; 136  :         voxel[x + y*voxelx + z*voxelx*voxely] = 1;

	mov	eax, DWORD PTR _voxel
	imul	ecx, ebp
	add	ecx, edi
	imul	ecx, edx
	add	ecx, esi
	inc	esi
	mov	DWORD PTR [eax+ecx*4], 1
	mov	edx, DWORD PTR _voxelx
	mov	ecx, DWORD PTR _voxely
	cmp	esi, edx
	jl	SHORT $LL32@Reset
$LN34@Reset:

; 134  :     for (int y = 0; y < voxely; y++)

	inc	edi
	cmp	edi, ecx
	jl	SHORT $LL35@Reset
	mov	eax, DWORD PTR _voxelz
$LN37@Reset:

; 131  : 
; 132  :     Logger("voxels %X (%dx%dx%d)\n", voxel, voxelx, voxely, voxelz);
; 133  : 	for (int z = 0; z < voxelz; z++)

	inc	ebp
	cmp	ebp, eax
	jl	SHORT $LL38@Reset
$LN36@Reset:

; 137  : 
; 138  : 	for (int z = 1; z < voxelz-1; z++)

	mov	esi, 1
	dec	eax
	mov	DWORD PTR _z$1$[esp+32], esi
	cmp	eax, esi
	jle	SHORT $LN27@Reset
	mov	edi, DWORD PTR _voxelz
$LL29@Reset:

; 139  :     for (int y = 1; y < voxely-1; y++)

	mov	ebp, 1
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, ebp
	jle	SHORT $LN28@Reset
	mov	ebx, DWORD PTR _z$1$[esp+32]
	lea	edi, DWORD PTR [edx-1]
$LL26@Reset:

; 140  :     for (int x = 1; x < voxelx-1; x++)

	mov	esi, 1
	cmp	edi, esi
	jle	SHORT $LN25@Reset
	npad	4
$LL23@Reset:

; 141  :         voxel[x + y*voxelx + z*voxelx*voxely] = 0;

	mov	eax, DWORD PTR _voxel
	imul	ecx, ebx
	add	ecx, ebp
	imul	ecx, edx
	add	ecx, esi
	inc	esi
	mov	DWORD PTR [eax+ecx*4], 0
	mov	edx, DWORD PTR _voxelx
	mov	ecx, DWORD PTR _voxely
	lea	edi, DWORD PTR [edx-1]
	cmp	esi, edi
	jl	SHORT $LL23@Reset
$LN25@Reset:

; 139  :     for (int y = 1; y < voxely-1; y++)

	inc	ebp
	lea	eax, DWORD PTR [ecx-1]
	cmp	ebp, eax
	jl	SHORT $LL26@Reset
	mov	esi, DWORD PTR _z$1$[esp+32]
	mov	edi, DWORD PTR _voxelz
$LN28@Reset:

; 137  : 
; 138  : 	for (int z = 1; z < voxelz-1; z++)

	inc	esi
	lea	eax, DWORD PTR [edi-1]
	mov	DWORD PTR _z$1$[esp+32], esi
	cmp	esi, eax
	jl	SHORT $LL29@Reset
	mov	ebx, DWORD PTR _w$[esp+28]
$LN27@Reset:

; 142  : 
; 143  : 	for (int z = 1; z < voxelz-1; z++)

	mov	esi, DWORD PTR _voxelz
	mov	ebp, 1
	lea	eax, DWORD PTR [esi-1]
	cmp	eax, ebp
	jle	$LN18@Reset
	movss	xmm2, DWORD PTR __real@3f666666
	movss	xmm1, DWORD PTR __real@3f800000
$LL20@Reset:

; 144  :     for (int y = 1; y < voxely-1; y++)

	mov	edi, 1
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, edi
	jle	SHORT $LN19@Reset
	npad	2
$LL17@Reset:

; 145  :     for (int x = 1; x < voxelx-1; x++)

	mov	esi, 1
	lea	eax, DWORD PTR [edx-1]
	cmp	eax, esi
	jle	SHORT $LN16@Reset
	npad	4
$LL14@Reset:

; 146  :         if (frand(&seed) > 0.9f) {

	imul	ebx, ebx, 65505
	mov	eax, ebx
	shr	eax, 9
	or	eax, 1065353216				; 3f800000H
	mov	DWORD PTR _res$4[esp+28], eax
	movss	xmm0, DWORD PTR _res$4[esp+28]
	subss	xmm0, xmm1
	comiss	xmm0, xmm2
	jbe	SHORT $LN13@Reset

; 147  :             voxel[x + y*voxelx + z*voxelx*voxely] = 1;

	mov	eax, DWORD PTR _voxel
	imul	ecx, ebp
	add	ecx, edi
	imul	ecx, edx
	add	ecx, esi
	mov	DWORD PTR [eax+ecx*4], 1
	mov	edx, DWORD PTR _voxelx
	mov	ecx, DWORD PTR _voxely
$LN13@Reset:

; 145  :     for (int x = 1; x < voxelx-1; x++)

	inc	esi
	lea	eax, DWORD PTR [edx-1]
	cmp	esi, eax
	jl	SHORT $LL14@Reset
$LN16@Reset:

; 144  :     for (int y = 1; y < voxely-1; y++)

	inc	edi
	lea	eax, DWORD PTR [ecx-1]
	cmp	edi, eax
	jl	SHORT $LL17@Reset
	mov	esi, DWORD PTR _voxelz
$LN19@Reset:

; 142  : 
; 143  : 	for (int z = 1; z < voxelz-1; z++)

	inc	ebp
	lea	eax, DWORD PTR [esi-1]
	cmp	ebp, eax
	jl	$LL20@Reset
$LN18@Reset:

; 148  :         }
; 149  : 
; 150  : 	for (int z = 0; z < voxelz; z++)

	xor	ebp, ebp
	mov	DWORD PTR _z$1$[esp+28], ebp
	test	esi, esi
	jle	$LN8@Reset
	movss	xmm2, DWORD PTR __real@43400000
	movss	xmm3, DWORD PTR __real@42000000
$LL10@Reset:

; 151  :     for (int y = 0; y < voxely; y++)

	xor	eax, eax
	mov	DWORD PTR _y$1$[esp+32], eax
	test	ecx, ecx
	jle	$LN9@Reset
$LL7@Reset:

; 152  :     for (int x = 0; x < voxelx; x++)

	xor	edi, edi
	test	edx, edx
	jle	$LN6@Reset
	npad	3
$LL4@Reset:

; 153  :         if (voxel[x + y*voxelx + z*voxelx*voxely]) {

	mov	esi, ecx
	imul	esi, ebp
	mov	ebp, DWORD PTR _voxel
	add	esi, eax
	imul	esi, edx
	add	esi, edi
	cmp	DWORD PTR [ebp+esi*4], 0
	je	$LN3@Reset

; 154  :             u8 r = (u8)(int)(32 + 192*frand(&seed));

	movss	xmm1, DWORD PTR __real@3f800000
	imul	ecx, ebx, 65505
	mov	eax, ecx

; 155  :             u8 g = (u8)(int)(32 + 192*frand(&seed));

	imul	ecx, ecx, 65505
	shr	eax, 9
	or	eax, 1065353216				; 3f800000H
	mov	DWORD PTR _res$1[esp+32], eax
	movss	xmm0, DWORD PTR _res$1[esp+32]
	subss	xmm0, xmm1

; 156  :             u8 b = (u8)(int)(32 + 192*frand(&seed));

	imul	ebx, ecx, 65505
	mov	eax, ecx
	shr	eax, 9
	or	eax, 1065353216				; 3f800000H
	mov	DWORD PTR _res$2[esp+32], eax
	mulss	xmm0, xmm2
	mov	eax, ebx
	shr	eax, 9
	or	eax, 1065353216				; 3f800000H
	mov	DWORD PTR _res$3[esp+32], eax
	addss	xmm0, xmm3
	cvttss2si eax, xmm0
	movss	xmm0, DWORD PTR _res$2[esp+32]
	subss	xmm0, xmm1
	movzx	ecx, al

; 157  :             u32 c = (r<<16) | (g<<8) | (b);
; 158  :             voxel[x + y*voxelx + z*voxelx*voxely] = c;

	shl	ecx, 8
	mulss	xmm0, xmm2
	addss	xmm0, xmm3
	cvttss2si eax, xmm0
	movss	xmm0, DWORD PTR _res$3[esp+32]
	subss	xmm0, xmm1
	movzx	eax, al
	or	ecx, eax
	shl	ecx, 8
	mulss	xmm0, xmm2
	addss	xmm0, xmm3
	cvttss2si eax, xmm0
	movzx	eax, al
	or	ecx, eax
	mov	eax, DWORD PTR _y$1$[esp+32]
	mov	DWORD PTR [ebp+esi*4], ecx
	mov	edx, DWORD PTR _voxelx
	mov	ecx, DWORD PTR _voxely
$LN3@Reset:

; 152  :     for (int x = 0; x < voxelx; x++)

	mov	ebp, DWORD PTR _z$1$[esp+28]
	inc	edi
	cmp	edi, edx
	jl	$LL4@Reset
$LN6@Reset:

; 151  :     for (int y = 0; y < voxely; y++)

	inc	eax
	mov	DWORD PTR _y$1$[esp+32], eax
	cmp	eax, ecx
	jl	$LL7@Reset
	mov	esi, DWORD PTR _voxelz
$LN9@Reset:

; 148  :         }
; 149  : 
; 150  : 	for (int z = 0; z < voxelz; z++)

	inc	ebp
	mov	DWORD PTR _z$1$[esp+28], ebp
	cmp	ebp, esi
	jl	$LL10@Reset
$LN8@Reset:

; 159  :         }
; 160  : 
; 161  :     bot[0].PosX = voxelx / 2.0f;

	movss	xmm0, DWORD PTR __real@3f000000

; 162  :     bot[0].PosY = voxely / 2.0f;
; 163  :     bot[0].PosZ = voxelz / 2.0f;
; 164  :     cam.PosX = bot[0].PosX;
; 165  :     cam.PosY = bot[0].PosY;
; 166  :     cam.PosZ = bot[0].PosZ;
; 167  :     return true;

	mov	eax, 1
	movd	xmm1, esi
	movd	xmm3, edx
	movd	xmm2, ecx
	cvtdq2ps xmm3, xmm3
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	cvtdq2ps xmm2, xmm2
	cvtdq2ps xmm1, xmm1
	mulss	xmm3, xmm0
	mulss	xmm2, xmm0
	mulss	xmm1, xmm0
	movss	DWORD PTR _bot, xmm3
	movss	DWORD PTR _bot+4, xmm2
	movss	DWORD PTR _bot+8, xmm1
	movss	DWORD PTR _cam, xmm3
	movss	DWORD PTR _cam+4, xmm2
	movss	DWORD PTR _cam+8, xmm1

; 168  : }

	add	esp, 16					; 00000010H
	ret	0
_Reset	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-211\source\applications\fps\engine.c
_TEXT	SEGMENT
tv224 = -8						; size = 4
tv172 = -4						; size = 4
_AudioThread PROC

; 93   : bool AudioThread(void) {

	sub	esp, 8

; 94   :     static int sample = 0;
; 95   :     int speed  = 3;
; 96   :     int tempo  = 4;
; 97   :     int volume = 128;
; 98   : 
; 99   :     int s = sample++;

	mov	eax, DWORD PTR ?sample@?1??AudioThread@@9@9
	mov	ecx, eax
	inc	eax
	mov	DWORD PTR ?sample@?1??AudioThread@@9@9, eax
	push	ebx

; 100  :     u32 i = s*speed/tempo;

	lea	eax, DWORD PTR [ecx+ecx*2]
	cdq
	and	edx, 3
	push	esi
	lea	ebx, DWORD PTR [edx+eax]
	sar	ebx, 2

; 101  :     u8 c1 = (((i*(i>>8 | i>>9) & 46 & i>>8)) ^ (i & i>>13 | i>>6));

	mov	eax, ebx
	mov	edx, ebx
	shr	eax, 8
	mov	ecx, ebx
	mov	DWORD PTR tv224[esp+16], eax
	mov	eax, ebx
	shr	edx, 13					; 0000000dH
	and	dl, bl
	shr	ecx, 6
	shr	eax, 9
	or	dl, cl
	mov	ecx, DWORD PTR tv224[esp+16]
	or	al, cl
	imul	bl
	and	al, cl
	and	al, 46					; 0000002eH
	xor	dl, al
	mov	DWORD PTR tv172[esp+16], edx

; 102  :     u8 c2 = (((i & 4096) ? ((i*(i ^ i%255) | (i>>4)) >> 1) : (i>>3) | ((i & 8192) ? i<<2 : i)));

	test	ebx, 4096				; 00001000H
	je	SHORT $LN5@AudioThrea
	mov	eax, -2139062143			; 80808081H
	mul	ebx
	shr	edx, 7
	imul	eax, edx, 255
	mov	edx, ebx
	sub	edx, eax
	mov	eax, ebx
	xor	edx, ebx
	shr	eax, 5
	imul	edx, ebx
	shr	edx, 1
	or	dl, al
	jmp	SHORT $LN6@AudioThrea
$LN5@AudioThrea:
	lea	ecx, DWORD PTR [ebx*4]
	test	ebx, 8192				; 00002000H
	jne	SHORT $LN4@AudioThrea
	mov	ecx, ebx
$LN4@AudioThrea:
	mov	edx, ebx
	shr	edx, 3
	or	dl, cl
$LN6@AudioThrea:

; 103  :     u8 c3 = 3*i & (i >> 8);

	mov	al, bl

; 104  :     u8 mzk = (c1+c2+c3)/3;
; 105  :     u32 pcm = mzk*volume/256;
; 106  :     ISpeaker_SetHerz(pcm);

	mov	esi, 1
	add	bl, bl
	add	al, bl
	movzx	ecx, al
	mov	eax, DWORD PTR tv224[esp+16]
	movzx	eax, al
	and	ecx, eax
	movzx	eax, dl
	add	ecx, eax
	mov	eax, DWORD PTR tv172[esp+16]
	movzx	eax, al
	add	ecx, eax
	mov	eax, 1431655766				; 55555556H
	imul	ecx
	push	182					; 000000b6H
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	movzx	eax, al
	shl	eax, 7
	cdq
	and	edx, 255				; 000000ffH
	push	67					; 00000043H
	lea	ecx, DWORD PTR [edx+eax]
	mov	eax, 1193180				; 001234dcH
	sar	ecx, 8
	test	ecx, ecx
	cmove	ecx, esi
	xor	edx, edx
	div	ecx
	mov	ebx, eax
	call	_outb
	movzx	ecx, bl
	push	ecx
	push	66					; 00000042H
	call	_outb
	shr	ebx, 8
	movzx	ecx, bl
	push	ecx
	push	66					; 00000042H
	call	_outb
	add	esp, 24					; 00000018H

; 107  :     return true;

	mov	eax, esi
	pop	esi
	pop	ebx

; 108  : }

	add	esp, 8
	ret	0
_AudioThread ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-211\source\applications\fps\engine.c
_TEXT	SEGMENT
_hertz$ = 8						; size = 4
_ISpeaker_SetHerz PROC

; 80   :     u32 hz = hertz;

	mov	ecx, DWORD PTR _hertz$[esp-4]

; 81   :     if (!hz) hz = 1;
; 82   :     u32 counter = 1193180 / hz;

	mov	eax, 1193180				; 001234dcH
	push	ebx
	push	esi
	test	ecx, ecx
	mov	esi, 1

; 83   : 
; 84   :     // 10|11|011|0
; 85   :     outb(PIT_COMMAND, PIT_CH2|PIT_BOTH|PIT_SQWV);

	push	182					; 000000b6H
	cmove	ecx, esi
	xor	edx, edx
	div	ecx
	push	67					; 00000043H
	mov	ebx, eax
	call	_outb

; 86   :     u8 lo = counter % 256;
; 87   :     u8 hi = counter / 256;
; 88   :     outb(PIT_TIMER2, lo);

	movzx	eax, bl
	push	eax
	push	66					; 00000042H
	call	_outb
	shr	ebx, 8

; 89   :     outb(PIT_TIMER2, hi);

	movzx	ecx, bl
	push	ecx
	push	66					; 00000042H
	call	_outb
	add	esp, 24					; 00000018H

; 90   :     return true;

	mov	eax, esi
	pop	esi
	pop	ebx

; 91   : }

	ret	0
_ISpeaker_SetHerz ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-211\source\applications\fps\engine.c
_TEXT	SEGMENT
_res$ = 8						; size = 4
_seed$ = 8						; size = 4
_frand	PROC

; 73   :     float res;
; 74   :     seed[0] *= 0xFFE1;

	mov	eax, DWORD PTR _seed$[esp-4]
	imul	ecx, DWORD PTR [eax], 65505
	mov	DWORD PTR [eax], ecx

; 75   :     *((u32*)&res) = (((u32)seed[0]) >> 9) | 0x3F800000;

	shr	ecx, 9
	or	ecx, 1065353216				; 3f800000H
	mov	DWORD PTR _res$[esp-4], ecx

; 76   :     return (res - 1.0f);

	fld	DWORD PTR _res$[esp-4]
	fsub	DWORD PTR __real@3f800000

; 77   : }

	ret	0
_frand	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-211\source\applications\fps\engine.c
_TEXT	SEGMENT
_res$ = 8						; size = 4
_seed$ = 8						; size = 4
_sfrand	PROC

; 66   :     float res;
; 67   :     seed[0] *= 0xFFE1;

	mov	eax, DWORD PTR _seed$[esp-4]
	imul	ecx, DWORD PTR [eax], 65505
	mov	DWORD PTR [eax], ecx

; 68   :     *((u32*)&res) = (((u32)seed[0]) >> 9) | 0x40000000;

	shr	ecx, 9
	or	ecx, 1073741824				; 40000000H
	mov	DWORD PTR _res$[esp-4], ecx

; 69   :     return (res - 3.0f);

	fld	DWORD PTR _res$[esp-4]
	fsub	DWORD PTR __real@40400000

; 70   : }

	ret	0
_sfrand	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-211\source\applications\fps\engine.c
;	COMDAT _fsqrt
_TEXT	SEGMENT
_n$ = 8							; size = 4
_fsqrt	PROC						; COMDAT

; 42   :     _asm fld dword ptr [n]

	fld	DWORD PTR _n$[esp-4]

; 43   :     _asm fsqrt

	fsqrt

; 44   : }

	ret	0
_fsqrt	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-211\source\applications\fps\engine.c
;	COMDAT _fcos
_TEXT	SEGMENT
_n$ = 8							; size = 4
_fcos	PROC						; COMDAT

; 37   :     _asm fld dword ptr [n]

	fld	DWORD PTR _n$[esp-4]

; 38   :     _asm fcos

	fcos

; 39   : }

	ret	0
_fcos	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\cex123\desktop\xxxxx\osdev\osdev-211\source\applications\fps\engine.c
;	COMDAT _fsin
_TEXT	SEGMENT
_n$ = 8							; size = 4
_fsin	PROC						; COMDAT

; 32   :     _asm fld  [n]

	fld	DWORD PTR _n$[esp-4]

; 33   :     _asm fsin

	fsin

; 34   : }

	ret	0
_fsin	ENDP
_TEXT	ENDS
END
